---
- name: Elasticsearch rolling upgrade
  hosts: "{{ elasticsearch_node }}"
  become: true
  gather_facts: no
  serial: 1

  vars:
      es_disable_allocation: '{"transient":{"cluster.routing.allocation.enable":"primaries"}}'
      es_enable_allocation: '{"transient":{"cluster.routing.allocation.enable": "all","cluster.routing.allocation.node_concurrent_recoveries": 5,"indices.recovery.max_bytes_per_sec": "500mb"}}'
      es_http_port: 9200
      es_transport_port: 9300
      es_protocol: https
      username: "elastic"
      password: "AXxnVfG-wUFScHNBeL73"

  tasks:
      - name: Ensure elasticsearch service is running
        systemd:
            name: elasticsearch
            state: started
        register: response

      - name: Wait for elasticsearch node to come back up if it was stopped
        wait_for:
            port: "{{ es_transport_port }}"
            delay: 45
        when: response.changed == true

      - name: Check current version
        uri:
            url: "{{ es_protocol }}://localhost:{{ es_http_port }}"
            method: GET
            url_username: "{{ username }}"
            url_password: "{{ password }}"
            validate_certs: false
        register: version_found
        retries: 10
        delay: 10

      - name: Display Current Elasticsearch Version
        debug:
            msg: "Elasticsearch version: {{ es_version }} -- Host: {{ inventory_hostname }} "
        vars:
            es_version: "{{ version_found.json.version.number }}"

      - block:
            - name: Set the es_host for the first host
              set_fact:
                  es_host: "{{ hostvars[groups[elasticsearch_node][1]].ansible_host }}"
              when:
                  - "inventory_hostname == groups[elasticsearch_node][0]"
                  - groups[elasticsearch_node] | length > 1

            - name: Set the es_host for the remaining hosts
              set_fact:
                  es_host: "{{hostvars[groups[elasticsearch_node][0]].ansible_host }}"
              when:
                  - "inventory_hostname != groups[elasticsearch_node][0]"
                  - groups[elasticsearch_node] | length > 1

            - name: Enable shard allocation for the cluster
              uri:
                  url: "{{ es_protocol }}://localhost:{{ es_http_port }}/_cluster/settings"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  validate_certs: false
                  method: PUT
                  body_format: json
                  body: "{{ es_enable_allocation }}"

            - name: Wait for cluster health to return to green
              uri:
                  url: "{{ es_protocol }}://localhost:{{ es_http_port }}/_cluster/health"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  validate_certs: false
                  method: GET
              register: response
              until: "response.json.status == 'green'"
              retries: 500
              delay: 15

            - name: Disable shard allocation for the cluster
              uri:
                  url: "{{ es_protocol }}://localhost:{{ es_http_port }}/_cluster/settings"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  method: PUT
                  validate_certs: false
                  body_format: json
                  body: "{{ es_disable_allocation }}"

            - name: Perform a synced flush
              uri:
                  url: "{{ es_protocol }}://localhost:{{ es_http_port }}/_flush"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  validate_certs: false
                  method: POST
                  status_code: "200, 409"

            - name: Shutdown elasticsearch node
              systemd:
                  name: elasticsearch
                  state: stopped
                  force: yes

            - name: Update elasticsearch
              apt:
                  name: elasticsearch={{ elk_version }}
                  state: present

            - name: Wait for all shards to be reallocated
              uri:
                  url: "{{ es_protocol }}://{{ es_host }}:{{ es_http_port }}/_cluster/health"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  method: GET
                  validate_certs: false
              register: response
              until: "response.json.relocating_shards == 0"
              retries: 20
              delay: 15
              when: groups[elasticsearch_node] | length > 1

            - name: Start elasticsearch
              systemd:
                  name: elasticsearch
                  state: restarted
                  # enabled: yes
                  # daemon_reload: yes

            - name: Wait for elasticsearch node to come back up
              wait_for:
                  port: "{{ es_transport_port }}"
                  delay: 35

            - name: Wait for elasticsearch http to come back up
              wait_for:
                  port: "{{ es_http_port }}"
                  delay: 5

            - name: Wait for cluster health to return to yellow or green
              uri:
                  url: "{{ es_protocol }}://localhost:{{ es_http_port }}/_cluster/health"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  method: GET
                  validate_certs: false
              register: response
              until: "response.json.status == 'yellow' or response.json.status == 'green'"
              retries: 500
              delay: 15

            - name: Enable shard allocation for the cluster
              uri:
                  url: "{{ es_protocol }}://localhost:{{ es_http_port }}/_cluster/settings"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  validate_certs: false
                  method: PUT
                  body_format: json
                  body: "{{ es_enable_allocation }}"
              register: response
              until: "response.json.acknowledged == true"
              retries: 10
              delay: 15

            - name: Wait for the node to recover
              uri:
                  url: "{{ es_protocol }}://localhost:{{ es_http_port }}/_cat/health"
                  url_username: "{{ username }}"
                  url_password: "{{ password }}"
                  validate_certs: false
                  method: GET
                  return_content: yes
              register: response
              until: "'green' in response.content"
              retries: 500
              delay: 15
        when: version_found.json.version.number is version_compare(elk_version, '<')
