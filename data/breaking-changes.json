[
  {
    "version": "7.0",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.0.html",
    "breaking_changes": [
      {
        "category": "Indices compatibility",
        "changes": [
          {
            "change": "Elasticsearch 7.0 cannot read indices created before 6.0",
            "details": "An Elasticsearch 7.0 node will not start in the presence of indices created in a version of Elasticsearch before 6.0. Indices created in Elasticsearch 5.x or before will need to be reindexed with Elasticsearch 6.x in order to be readable by Elasticsearch 7.x.",
            "impact": "Reindex indices from Elasticsearch 5.x or before using Elasticsearch 6.x before upgrading to 7.x."
          }
        ]
      },
      {
        "category": "Aggregations changes",
        "changes": [
          {
            "change": "Deprecated global_ordinals_hash and global_ordinals_low_cardinality execution hints for terms aggregations have been removed",
            "details": "These execution_hint values are removed.",
            "impact": "Replace with `global_ordinals`."
          },
          {
            "change": "search.max_buckets in the cluster setting default changed",
            "details": "The dynamic cluster setting named `search.max_buckets` now defaults to 10,000 (instead of unlimited in the previous version). Requests that try to return more than the limit will fail with an exception.",
            "impact": "Adjust `search.max_buckets` if you need to return more than 10,000 buckets, or ensure your requests stay within the limit."
          },
          {
            "change": "missing option of the composite aggregation has been removed",
            "details": "The `missing` option of the composite aggregation, deprecated in 6.x, has been removed.",
            "impact": "`missing_bucket` should be used instead."
          },
          {
            "change": "Replaced params._agg with state context variable in scripted metric aggregations",
            "details": "The object used to share aggregation state between the scripts in a Scripted Metric Aggregation is now a variable called `state` available in the script context, rather than being provided via the `params` object as `params._agg`.",
            "impact": "Update scripts to use `state` instead of `params._agg`."
          },
          {
            "change": "Make metric aggregation script parameters reduce_script and combine_script mandatory",
            "details": "The metric aggregation has been changed to require these two script parameters to ensure users are explicitly defining how their data is processed.",
            "impact": "Explicitly define `reduce_script` and `combine_script` for metric aggregations."
          },
          {
            "change": "percentiles and percentile_ranks now return null instead of NaN",
            "details": "The `percentiles` and `percentile_ranks` aggregations used to return `NaN` in the response if they were applied to an empty set of values. Because `NaN` is not officially supported by JSON, it has been replaced with `null`.",
            "impact": "Clients parsing responses should handle `null` instead of `NaN` for empty sets."
          },
          {
            "change": "stats and extended_stats now return 0 instead of null for zero docs",
            "details": "When the `stats` and `extended_stats` aggregations collected zero docs (`doc_count: 0`), their value would be `null`. This was in contrast with the `sum` aggregation which would return `0`. The `stats` and `extended_stats` aggs are now consistent with `sum` and also return zero.",
            "impact": "Clients parsing responses should handle `0` instead of `null` when `doc_count` is zero."
          }
        ]
      },
      {
        "category": "Analysis changes",
        "changes": [
          {
            "change": "Limiting the number of tokens produced by _analyze",
            "details": "To safeguard against out of memory errors, the number of tokens that can be produced using the `_analyze` endpoint has been limited to 10000.",
            "impact": "This default limit can be changed for a particular index with the index setting `index.analyze.max_token_count`."
          },
          {
            "change": "Limiting the length of an analyzed text during highlighting",
            "details": "Highlighting a text that was indexed without offsets or term vectors, requires analysis of this text in memory real time during the search request. For large texts this analysis may take substantial amount of time and memory. To protect against this, the maximum number of characters that will be analyzed has been limited to 1000000.",
            "impact": "This default limit can be changed for a particular index with the index setting `index.highlight.max_analyzed_offset`."
          },
          {
            "change": "delimited_payload_filter renaming",
            "details": "The `delimited_payload_filter` was deprecated and renamed to `delimited_payload` in 6.2. Using it in indices created before 7.0 will issue deprecation warnings. Using the old name in new indices created in 7.0 will throw an error.",
            "impact": "Use the new name `delimited_payload` instead."
          },
          {
            "change": "standard filter has been removed",
            "details": "The `standard` token filter has been removed because it doesn’t change anything in the stream.",
            "impact": "Remove the `standard` filter from your analysis chains."
          },
          {
            "change": "Deprecated standard_html_strip analyzer",
            "details": "The `standard_html_strip` analyzer has been deprecated, and should be replaced with a combination of the `standard` tokenizer and `html_strip` char_filter. Indexes created using this analyzer will still be readable in Elasticsearch 7.0, but it will not be possible to create new indexes using it.",
            "impact": "Replace `standard_html_strip` with a combination of the `standard` tokenizer and `html_strip` char_filter."
          },
          {
            "change": "The deprecated nGram and edgeNGram token filter cannot be used on new indices",
            "details": "The `nGram` and `edgeNGram` token filter names have been deprecated in an earlier 6.x version. Indexes created using these token filters will still be readable in Elasticsearch 7.0 but indexing documents using those filter names will issue a deprecation warning. Using the deprecated names on new indices starting with version 7.0.0 will be prohibited and throw an error when indexing or analyzing documents.",
            "impact": "Both names should be replaced by `ngram` or `edge_ngram` respectively."
          },
          {
            "change": "Limit to the difference between max_size and min_size in NGramTokenFilter and NGramTokenizer",
            "details": "To safeguard against creating too many index terms, the difference between `max_gram` and `min_gram` in `NGramTokenFilter` and `NGramTokenizer` has been limited to 1. Note that if the limit is exceeded an error is thrown only for new indices. For existing pre-7.0 indices, a deprecation warning is logged.",
            "impact": "This default limit can be changed with the index setting `index.max_ngram_diff`."
          },
          {
            "change": "Limit to the difference between max_shingle_size and min_shingle_size in ShingleTokenFilter",
            "details": "To safeguard against creating too many tokens, the difference between `max_shingle_size` and `min_shingle_size` in `ShingleTokenFilter` has been limited to 3. Note that if the limit is exceeded an error is thrown only for new indices. For existing pre-7.0 indices, a deprecation warning is logged.",
            "impact": "This default limit can be changed with the index setting `index.max_shingle_diff`."
          }
        ]
      },
      {
        "category": "Cluster changes",
        "changes": [
          {
            "change": ": is no longer allowed in cluster name",
            "details": "Due to cross-cluster search using `:` to separate a cluster and index name, cluster names may no longer contain `:`. ",
            "impact": "Rename your cluster if its name contains `:`."
          },
          {
            "change": "New default for wait_for_active_shards parameter of the open index command",
            "details": "The default value for the `wait_for_active_shards` parameter of the `open index` API is changed from 0 to 1, which means that the command will now by default wait for all primary shards of the opened index to be allocated.",
            "impact": "Be aware that `open index` operations might take longer by default. If you need the old behavior, explicitly set `wait_for_active_shards` to 0."
          },
          {
            "change": "Shard preferences _primary, _primary_first, _replica, and _replica_first are removed",
            "details": "These shard preferences are removed.",
            "impact": "Use the `_prefer_nodes` and `_only_nodes` preferences instead."
          },
          {
            "change": "Cluster-wide shard soft limit",
            "details": "Clusters now have soft limits on the total number of open shards in the cluster based on the number of nodes and the `cluster.max_shards_per_node` cluster setting, to prevent accidental operations that would destabilize the cluster.",
            "impact": "More information can be found in the documentation for that setting. Adjust `cluster.max_shards_per_node` if necessary."
          }
        ]
      },
      {
        "category": "Discovery changes",
        "changes": [
          {
            "change": "Cluster bootstrapping is required if discovery is configured",
            "details": "The first time a cluster is started, `cluster.initial_master_nodes` must be set to perform cluster bootstrapping. It should contain the names of the master-eligible nodes in the initial cluster and be defined on every master-eligible node in the cluster. The `discovery.zen.minimum_master_nodes` setting is permitted, but ignored, on 7.x nodes.",
            "impact": "Configure `cluster.initial_master_nodes` for new clusters or when starting a cluster for the first time. See the discovery settings summary for an example, and the cluster bootstrapping reference documentation describes this setting in more detail."
          },
          {
            "change": "Removing master-eligible nodes sometimes requires voting exclusions",
            "details": "If you wish to remove half or more of the master-eligible nodes from a cluster, you must first exclude the affected nodes from the voting configuration using the voting config exclusions API. If you remove fewer than half of the master-eligible nodes at the same time, voting exclusions are not required. If you remove only master-ineligible nodes such as data-only nodes or coordinating-only nodes, voting exclusions are not required. Likewise, if you add nodes to the cluster, voting exclusions are not required.",
            "impact": "Use the voting config exclusions API when removing half or more of the master-eligible nodes from a cluster."
          },
          {
            "change": "Discovery configuration is required in production",
            "details": "Production deployments of Elasticsearch now require at least one of the following settings to be specified in the `elasticsearch.yml` configuration file: `discovery.seed_hosts`, `discovery.seed_providers`, `cluster.initial_master_nodes`, `discovery.zen.ping.unicast.hosts`, `discovery.zen.hosts_provider`. The first three settings in this list are only available in versions 7.0 and above. If you are preparing to upgrade from an earlier version, you must set `discovery.zen.ping.unicast.hosts` or `discovery.zen.hosts_provider`.",
            "impact": "Ensure one of the specified discovery settings is configured in `elasticsearch.yml` for production deployments."
          },
          {
            "change": "New name for no_master_block setting",
            "details": "The `discovery.zen.no_master_block` setting is now known as `cluster.no_master_block`. Any value set for `discovery.zen.no_master_block` is now ignored.",
            "impact": "You should remove this setting and, if needed, set `cluster.no_master_block` appropriately after the upgrade."
          },
          {
            "change": "Reduced default timeouts for fault detection",
            "details": "By default the cluster fault detection subsystem now considers a node to be faulty if it fails to respond to 3 consecutive pings, each of which times out after 10 seconds. Thus a node that is unresponsive for longer than 30 seconds is liable to be removed from the cluster. Previously the default timeout for each ping was 30 seconds, so that an unresponsive node might be kept in the cluster for over 90 seconds.",
            "impact": "Nodes might be removed from the cluster faster if unresponsive. Adjust fault detection settings if needed."
          },
          {
            "change": "Master-ineligible nodes are ignored by discovery",
            "details": "In earlier versions it was possible to use master-ineligible nodes during the discovery process, either as seed nodes or to transfer discovery gossip indirectly between the master-eligible nodes. Discovery now involves only the master-eligible nodes in the cluster so that it is not possible to rely on master-ineligible nodes like this.",
            "impact": "You should configure `discovery.seed_hosts` or another seed hosts provider to provide the addresses of all the master-eligible nodes in your cluster."
          }
        ]
      },
      {
        "category": "API changes",
        "changes": [
          {
            "change": "Ingest configuration exception information is now transmitted in metadata field",
            "details": "Previously, some ingest configuration exception information about ingest processors was sent to the client in the HTTP headers, which is inconsistent with how exceptions are conveyed in other parts of Elasticsearch. Configuration exception information is now conveyed as a field in the response body.",
            "impact": "Clients parsing ingest API responses should look for exception information in the response body."
          },
          {
            "change": "Ingest plugin special handling has been removed",
            "details": "There was some special handling for installing and removing the `ingest-geoip` and `ingest-user-agent` plugins after they were converted to modules. This special handling was done to minimize breaking users in a minor release, and would exit with a status code zero to avoid breaking automation. This special handling has now been removed.",
            "impact": "Automation relying on the old status code behavior for these plugins might break."
          }
        ]
      },
      {
        "category": "Indices changes",
        "changes": [
          {
            "change": "Index creation no longer defaults to five shards",
            "details": "Previous versions of Elasticsearch defaulted to creating five shards per index. Starting with 7.0.0, the default is now one shard per index.",
            "impact": "Be aware of the new default. Explicitly set `number_of_shards` if you need more than one shard."
          },
          {
            "change": ": is no longer allowed in index name",
            "details": "Due to cross-cluster search using `:` to separate a cluster and index name, index names may no longer contain `:`. ",
            "impact": "Rename your indices if their names contain `:`."
          },
          {
            "change": "index.unassigned.node_left.delayed_timeout may no longer be negative",
            "details": "Negative values were interpreted as zero in earlier versions but are no longer accepted.",
            "impact": "Ensure `index.unassigned.node_left.delayed_timeout` is not set to a negative value."
          },
          {
            "change": "_flush and _force_merge will no longer refresh",
            "details": "In previous versions issuing a `_flush` or `_force_merge` (with `flush=true`) had the undocumented side-effect of refreshing the index which made new documents visible to searches and non-realtime GET operations. From now on these operations don’t have this side-effect anymore.",
            "impact": "To make documents visible an explicit `_refresh` call is needed unless the index is refreshed by the internal scheduler."
          },
          {
            "change": "Document distribution changes",
            "details": "Indices created with version 7.0.0 onwards will have an automatic `index.number_of_routing_shards` value set. This might change how documents are distributed across shards depending on how many shards the index has.",
            "impact": "In order to maintain the exact same distribution as a pre 7.0.0 index, the `index.number_of_routing_shards` must be set to the `index.number_of_shards` at index creation time. Note: if the number of routing shards equals the number of shards `_split` operations are not supported."
          },
          {
            "change": "Skipped background refresh on search idle shards",
            "details": "Shards belonging to an index that does not have an explicit `index.refresh_interval` configured will no longer refresh in the background once the shard becomes \"search idle\", i.e., the shard hasn’t seen any search traffic for `index.search.idle.after` seconds (defaults to 30s). Searches that access a search idle shard will be \"parked\" until the next refresh happens. Indexing requests with `wait_for_refresh` will also trigger a background refresh.",
            "impact": "Be aware of potential delays for searches on idle shards. Indexing requests with `wait_for_refresh` will still trigger a background refresh."
          },
          {
            "change": "Remove deprecated url parameters for Clear Indices Cache API",
            "details": "The following previously deprecated url parameter have been removed: `filter` (use `query` instead), `filter_cache` (use `query` instead), `request_cache` (use `request` instead), `field_data` (use `fielddata` instead).",
            "impact": "Use `query`, `request`, `fielddata` instead of the removed parameters."
          },
          {
            "change": "network.breaker.inflight_requests.overhead increased to 2",
            "details": "Previously the in flight requests circuit breaker considered only the raw byte representation. By bumping the value of `network.breaker.inflight_requests.overhead` from 1 to 2, this circuit breaker considers now also the memory overhead of representing the request as a structured object.",
            "impact": "This might cause the circuit breaker to trip earlier for large requests."
          },
          {
            "change": "Parent circuit breaker changes",
            "details": "The parent circuit breaker defines a new setting `indices.breaker.total.use_real_memory` which is `true` by default. This means that the parent circuit breaker will trip based on currently used heap memory instead of only considering the reserved memory by child circuit breakers. When this setting is `true`, the default parent breaker limit also changes from 70% to 95% of the JVM heap size.",
            "impact": "The previous behavior can be restored by setting `indices.breaker.total.use_real_memory` to `false`."
          },
          {
            "change": "Field data circuit breaker changes",
            "details": "As doc values have been enabled by default in earlier versions of Elasticsearch, there is less need for fielddata. Therefore, the default value of the setting `indices.breaker.fielddata.limit` has been lowered from 60% to 40% of the JVM heap size.",
            "impact": "The fielddata circuit breaker might trip earlier."
          },
          {
            "change": "fix value for index.shard.check_on_startup is removed",
            "details": "Deprecated option value `fix` for setting `index.shard.check_on_startup` is not supported.",
            "impact": "Do not use `fix` for `index.shard.check_on_startup`."
          },
          {
            "change": "elasticsearch-translog is removed",
            "details": "The `elasticsearch-translog` tool is removed.",
            "impact": "Use the `elasticsearch-shard` tool to remove corrupted translog data."
          }
        ]
      },
      {
        "category": "Mapping changes",
        "changes": [
          {
            "change": "The _all metadata field is removed",
            "details": "The `_all` field deprecated in 6 have now been removed.",
            "impact": "Update queries and mappings that relied on the `_all` field."
          },
          {
            "change": "The _uid metadata field is removed",
            "details": "This field used to index a composite key formed of the `_type` and the `_id`. Now that indices cannot have multiple types, this has been removed in favour of `_id`.",
            "impact": "Use `_id` instead of `_uid`."
          },
          {
            "change": "The _default_ mapping is no longer allowed",
            "details": "The `_default_` mapping has been deprecated in 6.0 and is now no longer allowed in 7.0. Trying to configure a `_default_` mapping on 7.x indices will result in an error. If an index template contains a `_default_` mapping, it will fail to create new indices.",
            "impact": "To resolve this issue, the `_default_` mapping should be removed from the template."
          },
          {
            "change": "index_options for numeric fields has been removed",
            "details": "The `index_options` field for numeric fields has been deprecated in 6 and has now been removed.",
            "impact": "Do not use `index_options` for numeric fields."
          },
          {
            "change": "Limiting the number of nested json objects",
            "details": "To safeguard against out of memory errors, the number of nested json objects within a single document across all fields has been limited to 10000.",
            "impact": "This default limit can be changed with the index setting `index.mapping.nested_objects.limit`."
          },
          {
            "change": "The update_all_types option has been removed",
            "details": "This option is useless now that all indices have at most one type.",
            "impact": "Remove `update_all_types` from your requests."
          },
          {
            "change": "The classic similarity has been removed",
            "details": "The `classic` similarity relied on coordination factors for scoring to be good in presence of stopwords in the query. This feature has been removed from Lucene, which means that the `classic` similarity now produces scores of lower quality.",
            "impact": "It is advised to switch to `BM25` instead, which is widely accepted as a better alternative."
          },
          {
            "change": "Similarities fail when unsupported options are provided",
            "details": "An error will now be thrown when unknown configuration options are provided to similarities. Such unknown parameters were ignored before.",
            "impact": "Ensure only supported options are provided to similarities."
          },
          {
            "change": "Changed default geo_shape indexing strategy",
            "details": "`geo_shape` types now default to using a vector indexing approach based on Lucene’s new `LatLonShape` field type. This indexes shapes as a triangular mesh instead of decomposing them into individual grid cells. Note that these strategies are now deprecated and will be removed in a future version.",
            "impact": "To index using legacy prefix trees the `tree` parameter must be explicitly set to one of `quadtree` or `geohash`. If using timed index creation from templates, the `geo_shape` mapping should also be changed in the template to explicitly define `tree` to one of `geohash` or `quadtree`."
          },
          {
            "change": "Deprecated geo_shape parameters",
            "details": "The following type parameters are deprecated for the `geo_shape` field type: `tree`, `precision`, `tree_levels`, `distance_error_pct`, `points_only`, and `strategy`. They will be removed in a future version.",
            "impact": "Avoid using these parameters as they will be removed in a future version."
          },
          {
            "change": "Limiting the number of completion contexts",
            "details": "The maximum allowed number of completion contexts in a mapping will be limited to 10 in the next major version. Completion fields that define more than 10 contexts in a mapping will log a deprecation warning in this version.",
            "impact": "Reduce the number of completion contexts to 10 or fewer per mapping to avoid future errors."
          },
          {
            "change": "include_type_name now defaults to false",
            "details": "The default for `include_type_name` is now `false` for all APIs that accept the parameter.",
            "impact": "Explicitly set `include_type_name` to `true` if you rely on the old default behavior."
          }
        ]
      },
      {
        "category": "ML changes",
        "changes": [
          {
            "change": "Types in Datafeed config are no longer valid",
            "details": "Types have been removed from the datafeed config and are no longer valid parameters.",
            "impact": "Remove type parameters from datafeed configurations."
          }
        ]
      },
      {
        "category": "Search and Query DSL changes",
        "changes": [
          {
            "change": "Off-heap terms index",
            "details": "The terms dictionary is the part of the inverted index that records all terms that occur within a segment in sorted order. Until now this terms index had always been loaded on-heap. As of 7.0, the terms index is loaded on-heap for fields that only have unique values such as `_id` fields, and off-heap otherwise - likely most other fields. This is expected to reduce memory requirements but might slow down search requests if both below conditions are met: The size of the data directory on each node is significantly larger than the amount of memory that is available to the filesystem cache. The number of matches of the query is not several orders of magnitude greater than the number of terms that the query tries to match, either explicitly via `term` or `terms` queries, or implicitly via multi-term queries such as `prefix`, `wildcard` or `fuzzy` queries. This change affects both existing indices created with Elasticsearch 6.x and new indices created with Elasticsearch 7.x.",
            "impact": "Monitor search performance, especially if you have large data directories and specific query patterns."
          },
          {
            "change": "Changes to queries",
            "details": "The default value for `transpositions` parameter of `fuzzy` query has been changed to `true`. The `query_string` options `use_dismax`, `split_on_whitespace`, `all_fields`, `locale`, `auto_generate_phrase_query` and `lowercase_expanded_terms` deprecated in 6.x have been removed. Purely negative queries (only `MUST_NOT` clauses) now return a score of 0 rather than 1. The boundary specified using geohashes in the `geo_bounding_box` query now include entire geohash cell, instead of just geohash center. Attempts to generate multi-term phrase queries against non-text fields with a custom analyzer will now throw an exception. An envelope crossing the dateline in a `geo_shape` query is now processed correctly when specified using REST API instead of having its left and right corners flipped. Attempts to set `boost` on inner span queries will now throw a parsing exception.",
            "impact": "Be aware of `fuzzy` query `transpositions` default. Remove the listed `query_string` options. Adjust logic if relying on score of 1 for purely negative queries. Be aware of `geo_bounding_box` behavior change. Do not generate multi-term phrase queries against non-text fields with custom analyzers. Ensure `geo_shape` queries are correctly formed. Do not set `boost` on inner span queries."
          },
          {
            "change": "Adaptive replica selection enabled by default",
            "details": "Adaptive replica selection has been enabled by default.",
            "impact": "If you wish to return to the older round robin of search requests, you can use the `cluster.routing.use_adaptive_replica_selection` setting: `PUT /_cluster/settings { \"persistent\": { \"cluster.routing.use_adaptive_replica_selection\": false } }`"
          },
          {
            "change": "Search API returns 400 for invalid requests",
            "details": "The Search API returns `400 - Bad request` while it would previously return `500 - Internal Server Error` in the following cases of invalid request: the result window is too large, `sort` is used in combination with `rescore`, the `rescore` window is too large, the number of slices is too large, `keep alive` for scroll is too large, number of filters in the adjacency matrix aggregation is too large, script compilation errors.",
            "impact": "Clients should handle `400` status codes for these invalid request types."
          },
          {
            "change": "Scroll queries cannot use the request_cache anymore",
            "details": "Setting `request_cache:true` on a query that creates a scroll (`scroll=1m`) has been deprecated in 6 and will now return a `400 - Bad request`.",
            "impact": "Remove `request_cache:true` from scroll queries. Scroll queries are not meant to be cached."
          },
          {
            "change": "Scroll queries cannot use rescore anymore",
            "details": "Including a `rescore` clause on a query that creates a scroll (`scroll=1m`) has been deprecated in 6.5 and will now return a `400 - Bad request`. Allowing `rescore` on scroll queries would break the scroll sort. In the 6.x line, the `rescore` clause was silently ignored (for scroll queries), and it was allowed in the 5.x line.",
            "impact": "Remove `rescore` clauses from scroll queries."
          },
          {
            "change": "Term Suggesters supported distance algorithms",
            "details": "The following string distance algorithms were given additional names in 6.2 and their existing names were deprecated. The deprecated names have now been removed: `levenstein` (replaced by `levenshtein`), `jarowinkler` (replaced by `jaro_winkler`).",
            "impact": "Use `levenshtein` and `jaro_winkler` instead."
          },
          {
            "change": "popular mode for Suggesters",
            "details": "The `popular` mode for Suggesters (`term` and `phrase`) now uses the doc frequency (instead of the sum of the doc frequency) of the input terms to compute the frequency threshold for candidate suggestions.",
            "impact": "Suggester scores might be affected."
          },
          {
            "change": "Limiting the number of terms that can be used in a Terms Query request",
            "details": "Executing a Terms Query with a lot of terms may degrade the cluster performance, as each additional term demands extra processing and memory. To safeguard against this, the maximum number of terms that can be used in a Terms Query request has been limited to 65536.",
            "impact": "This default maximum can be changed for a particular index with the index setting `index.max_terms_count`."
          },
          {
            "change": "Limiting the length of regex that can be used in a Regexp Query request",
            "details": "Executing a Regexp Query with a long regex string may degrade search performance. To safeguard against this, the maximum length of regex that can be used in a Regexp Query request has been limited to 1000.",
            "impact": "This default maximum can be changed for a particular index with the index setting `index.max_regex_length`."
          },
          {
            "change": "Limiting the number of auto-expanded fields",
            "details": "Executing queries that use automatic expansion of fields (e.g. `query_string`, `simple_query_string` or `multi_match`) can have performance issues for indices with a large numbers of fields. To safeguard against this, a default limit of 1024 fields has been introduced for queries using the \"all fields\" mode (`\"default_field\": \"*\"`) or other fieldname expansions (e.g. `\"foo*\"`).",
            "impact": "If needed, you can change this limit using the `indices.query.bool.max_clause_count` static cluster setting."
          },
          {
            "change": "Invalid _search request body",
            "details": "Search requests with extra content after the main object will no longer be accepted by the `_search` endpoint. A parsing exception will be thrown instead.",
            "impact": "Ensure `_search` request bodies contain only the main JSON object."
          },
          {
            "change": "Doc-value fields default format",
            "details": "The format of doc-value fields is changing to be the same as what could be obtained in 6.x with the special `use_field_mapping` format. This is mostly a change for date fields, which are now formatted based on the format that is configured in the mappings by default.",
            "impact": "This behavior can be changed by specifying a `format` within the doc-value field."
          },
          {
            "change": "Context Completion Suggester",
            "details": "The ability to query and index context enabled suggestions without context, deprecated in 6.x, has been removed. Context enabled suggestion queries without contexts have to visit every suggestion, which degrades the search performance considerably. For geo context the value of the `path` parameter is now validated against the mapping, and the context is only accepted if `path` points to a field with `geo_point` type.",
            "impact": "Always provide context for context-enabled suggestions. Ensure geo context `path` points to a `geo_point` field."
          },
          {
            "change": "Semantics changed for max_concurrent_shard_requests",
            "details": "`max_concurrent_shard_requests` used to limit the total number of concurrent shard requests a single high level search request can execute. In 7.0 this changed to be the max number of concurrent shard requests per node. The default is now 5.",
            "impact": "This change affects how concurrent shard requests are managed and might impact performance if not accounted for."
          },
          {
            "change": "max_score set to null when scores are not tracked",
            "details": "`max_score` used to be set to 0 whenever scores are not tracked. `null` is now used instead which is a more appropriate value for a scenario where scores are not available.",
            "impact": "Clients parsing search responses should handle `null` for `max_score` when scores are not tracked."
          },
          {
            "change": "Negative boosts are not allowed",
            "details": "Setting a negative boost for a query or a field, deprecated in 6x, is not allowed in this version.",
            "impact": "To deboost a specific query or field you can use a boost comprise between 0 and 1."
          },
          {
            "change": "Negative scores are not allowed in Function Score Query",
            "details": "Negative scores in the Function Score Query are deprecated in 6.x, and are not allowed in this version. If a negative score is produced as a result of computation (e.g. in `script_score` or `field_value_factor` functions), an error will be thrown.",
            "impact": "Ensure `function_score` functions do not produce negative scores."
          },
          {
            "change": "The filter context has been removed",
            "details": "The filter context has been removed from Elasticsearch’s query builders, the distinction between queries and filters is now decided in Lucene depending on whether queries need to access score or not. As a result `bool` queries with `should` clauses that don’t need to access the score will no longer set their `minimum_should_match` to 1. This behavior has been deprecated in the previous major version.",
            "impact": "Be aware that `minimum_should_match` will not be implicitly set to 1 for `should` clauses in a filter context."
          },
          {
            "change": "hits.total is now an object in the search response",
            "details": "The total hits that match the search request is now returned as an object with a `value` and a `relation`. `value` indicates the number of hits that match and `relation` indicates whether the value is accurate (`eq`) or a lower bound (`gte`).",
            "impact": "Update clients to parse `hits.total` as an object. You can also retrieve `hits.total` as a number in the rest response by adding `rest_total_hits_as_int=true` in the request parameter of the search request (this parameter will be removed in 8.0)."
          },
          {
            "change": "hits.total is omitted in the response if track_total_hits is disabled (false)",
            "details": "If `track_total_hits` is set to `false` in the search request the search response will set `hits.total` to `null` and the object will not be displayed in the rest layer.",
            "impact": "Clients should handle the absence or `null` value of `hits.total`. You can add `rest_total_hits_as_int=true` in the search request parameters to get the old format back (`\"total\": -1`)."
          },
          {
            "change": "track_total_hits defaults to 10,000",
            "details": "By default search request will count the total hits accurately up to 10,000 documents. If the total number of hits that match the query is greater than this value, the response will indicate that the returned value is a lower bound.",
            "impact": "You can force the count to always be accurate by setting `track_total_hits` to `true` explicitly in the search request."
          },
          {
            "change": "Limitations on Similarities",
            "details": "Lucene 8 introduced more constraints on similarities, in particular: scores must not be negative, scores must not decrease when term freq increases, scores must not increase when norm (interpreted as an unsigned long) increases.",
            "impact": "Custom similarities must adhere to these new constraints."
          },
          {
            "change": "Weights in Function Score must be positive",
            "details": "Negative `weight` parameters in the `function_score` are no longer allowed.",
            "impact": "Ensure `weight` parameters in `function_score` are positive."
          },
          {
            "change": "Query string and Simple query string limit expansion of fields to 1024",
            "details": "The number of automatically expanded fields for the \"all fields\" mode (`\"default_field\": \"*\"`) for the `query_string` and `simple_query_string` queries is now 1024 fields.",
            "impact": "If you need to expand more fields, adjust the `indices.query.bool.max_clause_count` static cluster setting."
          }
        ]
      },
      {
        "category": "Suggesters changes",
        "changes": [
          {
            "change": "Registration of suggesters in plugins has changed",
            "details": "Plugins must now explicitly indicate the type of suggestion that they produce.",
            "impact": "Update custom suggester plugins to explicitly indicate suggestion type."
          },
          {
            "change": "Phrase suggester now multiples alpha",
            "details": "Previously, the laplace smoothing used by the phrase suggester added `alpha`, when it should instead multiply. This behavior has been changed and will affect suggester scores.",
            "impact": "Suggester scores might be affected. Review and adjust if necessary."
          }
        ]
      },
      {
        "category": "Packaging changes",
        "changes": [
          {
            "change": "systemd service file is no longer configuration",
            "details": "The systemd service file `/usr/lib/systemd/system/elasticsearch.service` was previously marked as a configuration file in rpm and deb packages.",
            "impact": "Overrides to the systemd elasticsearch service should be made in `/etc/systemd/system/elasticsearch.service.d/override.conf`."
          },
          {
            "change": "tar package no longer includes windows specific files",
            "details": "The tar package previously included files in the `bin` directory meant only for windows. These files have been removed.",
            "impact": "Use the zip package instead for Windows deployments."
          },
          {
            "change": "Ubuntu 14.04 is no longer supported",
            "details": "Ubuntu 14.04 will reach end-of-life on April 30, 2019. As such, we are no longer supporting Ubuntu 14.04.",
            "impact": "Upgrade to a supported Ubuntu version."
          },
          {
            "change": "CLI secret prompting is no longer supported",
            "details": "The ability to use `${prompt.secret}` and `${prompt.text}` to collect secrets from the CLI at server start is no longer supported.",
            "impact": "Secure settings have replaced the need for these prompts. Use secure settings instead."
          }
        ]
      },
      {
        "category": "Plugins changes",
        "changes": [
          {
            "change": "Azure Repository plugin legacy settings removed",
            "details": "The legacy azure settings which were starting with `cloud.azure.storage.` prefix have been removed. This includes `account`, `key`, `default` and `timeout`. Global timeout setting `cloud.azure.storage.timeout` has been removed.",
            "impact": "You need to use settings which are starting with `azure.client.` prefix instead. You must set timeout per azure client instead, e.g., `azure.client.default.timeout: 10s`. See Azure Repository settings."
          },
          {
            "change": "Google Cloud Storage Repository plugin settings removed",
            "details": "The repository settings `application_name`, `connect_timeout` and `read_timeout` have been removed.",
            "impact": "These settings must now be specified in the client settings instead. See Google Cloud Storage Client Settings."
          },
          {
            "change": "S3 Repository Plugin uses path style access pattern",
            "details": "The plugin now uses the path style access pattern for all requests. In previous versions it was automatically determining whether to use virtual hosted style or path style access.",
            "impact": "Ensure your S3 configuration is compatible with path style access."
          },
          {
            "change": "Analysis Plugin misspelled helper method renamed",
            "details": "The misspelled helper method `requriesAnalysisSettings(AnalyzerProvider<T> provider)` has been renamed to `requiresAnalysisSettings`.",
            "impact": "Update plugin code to use the correct method name."
          },
          {
            "change": "File-based discovery plugin removed",
            "details": "This plugin has been removed since its functionality is now part of Elasticsearch and requires no plugin. The location of the hosts file has moved from `$ES_PATH_CONF/file-discovery/unicast_hosts.txt` to `$ES_PATH_CONF/unicast_hosts.txt`.",
            "impact": "Remove the plugin. Update the path to `unicast_hosts.txt`. See the file-based hosts provider documentation for further information."
          },
          {
            "change": "Security Extensions getRealmSettings method removed",
            "details": "As a consequence of the change to Realm settings, the `getRealmSettings` method has been removed from the `SecurityExtension` class, and the `settings` method on `RealmConfig` now returns the node’s (global) settings.",
            "impact": "Custom security extensions should register their settings by implementing the standard `Plugin.getSettings` method, and can retrieve them from `RealmConfig.settings()` or using one of the `RealmConfig.getSetting` methods. Each realm setting should be defined as an `AffixSetting`."
          },
          {
            "change": "Tribe node removed",
            "details": "Tribe node functionality has been removed.",
            "impact": "Use Cross Cluster Search instead of tribe nodes."
          },
          {
            "change": "Discovery implementations are no longer pluggable",
            "details": "The method `DiscoveryPlugin#getDiscoveryTypes()` was removed, so that plugins can no longer provide their own discovery implementations.",
            "impact": "Plugins can no longer provide their own discovery implementations."
          },
          {
            "change": "Watcher hipchat action removed",
            "details": "Hipchat has been deprecated and shut down as a service. The hipchat action for watches has been removed.",
            "impact": "Update watches to remove hipchat actions."
          }
        ]
      },
      {
        "category": "API changes",
        "changes": [
          {
            "change": "Internal Versioning is no longer supported for optimistic concurrency control",
            "details": "Elasticsearch maintains a numeric version field for each document it stores. That field is incremented by one with every change to the document. Until 7.0.0 the API allowed using that field for optimistic concurrency control. Sadly, that approach is flawed because the value of the version doesn’t always uniquely represent a change to the document. Due to that issue, internal versioning can no longer be used and is replaced by a new method based on sequence numbers.",
            "impact": "To switch to the new method, perform a rolling upgrade to 6.8, reindex any indices created before 6.0, and update your application or workflow to use sequence numbers for concurrency control. Then perform a rolling upgrade to 7.17.29. The external versioning type is still fully supported."
          },
          {
            "change": "Camel case and underscore parameters deprecated in 6.x have been removed",
            "details": "A number of duplicate parameters deprecated in 6.x have been removed from Bulk request, Multi Get request, Term Vectors request, and More Like This Query requests. The following camel case parameters have been removed: `opType`, `versionType`, `_versionType`. The following parameters starting with underscore have been removed: `_parent`, `_retry_on_conflict`, `_routing`, `_version`, `_version_type`.",
            "impact": "Instead of these removed parameters, use their non camel case equivalents without starting underscore, e.g. use `version_type` instead of `_version_type` or `versionType`."
          },
          {
            "change": "Thread pool info in Nodes and Cat APIs changed",
            "details": "In previous versions of Elasticsearch, the thread pool info returned in the nodes info API returned `min` and `max` values reflecting the configured minimum and maximum number of threads that could be in each thread pool. This discrepancy between the API and the configuration parameters has been rectified. Now, the API will report `core` and `max` for scaling thread pools, and `size` for fixed thread pools. Similarly, in the cat thread pool API the existing `size` output has been renamed to `pool_size` which reflects the number of threads currently in the pool; the shortcut for this value has been changed from `s` to `psz`. The `min` output has been renamed to `core` with a shortcut of `cr`, the shortcut for `max` has been changed to `mx`, and the `size` output with a shortcut of `sz` has been reused to report the configured number of threads in the pool.",
            "impact": "Update clients parsing thread pool information from Nodes and Cat APIs to reflect new field names and semantics. Note that `core` and `max` will be populated for scaling thread pools, and `size` will be populated for fixed thread pools."
          },
          {
            "change": "The parameter fields deprecated in 6.x has been removed from Bulk request and Update request",
            "details": "The `fields` parameter deprecated in 6.x has been removed from Bulk request and Update request. The Update API returns `400 - Bad request` if request contains unknown parameters (instead of ignored in the previous version).",
            "impact": "Remove `fields` parameter from Bulk and Update requests."
          },
          {
            "change": "PUT Document with Version error message changed when document is missing",
            "details": "If you attempt to PUT a document with versioning (e.g. `PUT /test/_doc/1?version=4`) but the document does not exist, a cryptic message is returned: `version conflict, current version [-1] is different than the one provided [4]`. Now if the document is missing a more helpful message is returned: `document does not exist (expected version [4])`.",
            "impact": "Although exceptions messages are liable to change and not generally subject to backwards compatibility, the nature of this message might mean clients are relying on parsing the version numbers and so the format change might impact some users."
          },
          {
            "change": "Remove support for suggest metric/index metric in indices stats and nodes stats APIs",
            "details": "Previously, suggest stats were folded into search stats. Support for the `suggest` metric on the `indices stats` and `nodes stats` APIs remained for backwards compatibility. Backwards support for the `suggest` metric was deprecated in 6.3.0 and now removed in 7.0.0.",
            "impact": "Do not use the `suggest` metric in `indices stats` and `nodes stats` APIs."
          },
          {
            "change": "Field capabilities request format",
            "details": "In the past, fields could be provided either as a parameter, or as part of the request body. Specifying fields in the request body as opposed to a parameter was deprecated in 6.4.0, and is now unsupported in 7.0.0.",
            "impact": "Provide `fields` as a URL parameter, not in the request body."
          },
          {
            "change": "copy_settings is deprecated on shrink and split APIs",
            "details": "Versions of Elasticsearch prior to 6.4.0 did not copy index settings on shrink and split operations. Starting with Elasticsearch 7.0.0, the default behavior will be for such settings to be copied on such operations. To enable users in 6.4.0 to transition in 6.4.0 to the default behavior in 7.0.0, the `copy_settings` parameter was added on the REST layer. As this behavior will be the only behavior in 8.0.0, this parameter is deprecated in 7.0.0 for removal in 8.0.0.",
            "impact": "Remove `copy_settings` parameter. Be aware that index settings will be copied by default."
          },
          {
            "change": "The deprecated stored script contexts have now been removed",
            "details": "When putting stored scripts, support for storing them with the deprecated `template` context or without a context is now removed.",
            "impact": "Scripts must be stored using the `script` context as mentioned in the documentation."
          },
          {
            "change": "Removed Get Aliases API limitations when security features are enabled",
            "details": "The behavior and response codes of the `get aliases` API no longer vary depending on whether security features are enabled. Previously a `404 - NOT FOUND (IndexNotFoundException)` could be returned in case the current user was not authorized for any alias. An empty response with status `200 - OK` is now returned instead at all times.",
            "impact": "Clients should expect `200 OK` with an empty response for unauthorized alias requests, not `404`."
          },
          {
            "change": "Put User API response no longer has user object",
            "details": "The Put User API response was changed in 6.5.0 to add the `created` field outside of the user object where it previously had been. In 7.0.0 the user object has been removed in favor of the top level `created` field.",
            "impact": "Update clients to parse the `created` field directly from the top level of the response."
          },
          {
            "change": "Source filtering url parameters _source_include and _source_exclude have been removed",
            "details": "The deprecated in 6.x url parameters `_source_include` and `_source_exclude` are now removed.",
            "impact": "Use `_source_includes` and `_source_excludes` instead."
          },
          {
            "change": "Multi Search Request metadata validation",
            "details": "MultiSearchRequests issued through `_msearch` now validate all keys in the metadata section. Previously unknown keys were ignored while now an exception is thrown.",
            "impact": "Ensure only known keys are used in the metadata section of `_msearch` requests."
          },
          {
            "change": "Deprecated graph endpoints removed",
            "details": "The deprecated graph endpoints (those with `/_graph/_explore`) have been removed.",
            "impact": "Do not use these deprecated graph endpoints."
          },
          {
            "change": "Deprecated _termvector endpoint removed",
            "details": "The `_termvector` endpoint was deprecated in 2.0 and has now been removed.",
            "impact": "The endpoint `_termvectors` (plural) should be used instead."
          },
          {
            "change": "When security features are enabled, index monitoring APIs over restricted indices are not authorized implicitly anymore",
            "details": "Restricted indices (currently only `.security-6` and `.security`) are special internal indices that require setting the `allow_restricted_indices` flag on every index permission that covers them. If this flag is `false` (default) the permission will not cover these and actions against them will not be authorized. However, the monitoring APIs were the only exception to this rule. This exception has been forfeited and index monitoring privileges have to be granted explicitly, using the `allow_restricted_indices` flag on the permission (as any other index privilege).",
            "impact": "Grant explicit index monitoring privileges with `allow_restricted_indices` for restricted indices."
          },
          {
            "change": "Clearing indices cache is now POST-only",
            "details": "The `_cache/clear` API no longer supports the GET HTTP verb. It must be called with POST.",
            "impact": "Use POST for `_cache/clear` API calls."
          },
          {
            "change": "Cluster state size metrics removed from Cluster State API Response",
            "details": "The `compressed_size` / `compressed_size_in_bytes` fields were removed from the Cluster State API response. The calculation of the size was expensive and had dubious value, so the field was removed from the response.",
            "impact": "Do not rely on these fields in the Cluster State API response."
          },
          {
            "change": "Migration Assistance API has been removed",
            "details": "The Migration Assistance API has been functionally replaced by the Deprecation Info API, and the Migration Upgrade API is not used for the transition from ES 6.x to 7.x, and does not need to be kept around to repair indices that were not properly upgraded before upgrading the cluster, as was the case in 6.",
            "impact": "Use the Deprecation Info API instead."
          },
          {
            "change": "Return 200 when cluster has valid read-only blocks",
            "details": "If the cluster was configured with `no_master_block: write` and lost its master, it would return a `503` status code from a main request (`GET /`) even though there are viable read-only nodes available. The cluster now returns `200` status in this situation.",
            "impact": "Clients should expect `200` status for `GET /` in read-only block scenarios."
          }
        ]
      },
      {
        "category": "Java API changes",
        "changes": [
          {
            "change": "isShardsAcked deprecated in 6.2 has been removed",
            "details": "`isShardsAcked` has been replaced by `isShardsAcknowledged` in `CreateIndexResponse`, `RolloverResponse` and `CreateIndexClusterStateUpdateResponse`.",
            "impact": "Use `isShardsAcknowledged` instead."
          },
          {
            "change": "prepareExecute removed from the client api",
            "details": "The `prepareExecute` method which created a request builder has been removed from the client api.",
            "impact": "Instead, construct a builder for the appropriate request directly."
          },
          {
            "change": "Some Aggregation classes have moved packages",
            "details": "All classes present in `org.elasticsearch.search.aggregations.metrics.*` packages were moved to a single `org.elasticsearch.search.aggregations.metrics` package. All classes present in `org.elasticsearch.search.aggregations.pipeline.*` packages were moved to a single `org.elasticsearch.search.aggregations.pipeline` package. In addition, `org.elasticsearch.search.aggregations.pipeline.PipelineAggregationBuilders` was moved to `org.elasticsearch.search.aggregations.PipelineAggregationBuilders`.",
            "impact": "Update import statements for these aggregation classes."
          },
          {
            "change": "Retry.withBackoff methods with Settings removed",
            "details": "The variants of `Retry.withBackoff` that included `Settings` have been removed because `Settings` is no longer needed.",
            "impact": "Use `Retry.withBackoff` methods that do not require `Settings`."
          },
          {
            "change": "Deprecated method Client#termVector removed",
            "details": "The client method `termVector`, deprecated in 2.0, has been removed.",
            "impact": "The method `termVectors` (plural) should be used instead."
          },
          {
            "change": "Deprecated constructor AbstractLifecycleComponent(Settings settings) removed",
            "details": "The constructor `AbstractLifecycleComponent(Settings settings)`, deprecated in 6.7 has been removed.",
            "impact": "The parameterless constructor should be used instead."
          },
          {
            "change": "Changes to Geometry classes",
            "details": "Geometry classes used to represent geo values in SQL have been moved from the `org.elasticsearch.geo.geometry` package to the `org.elasticsearch.geometry` package and the order of the constructor parameters has changed from `lat, lon` to `lon, lat`.",
            "impact": "Update package imports and constructor parameter order for Geometry classes."
          }
        ]
      },
      {
        "category": "Settings changes",
        "changes": [
          {
            "change": "The default for node.name is now the hostname",
            "details": "`node.name` now defaults to the hostname at the time when Elasticsearch is started. Previously the default node name was the first eight characters of the node id.",
            "impact": "It can still be configured explicitly in `elasticsearch.yml` if you rely on the old default or need a specific name."
          },
          {
            "change": "Percolator index.percolator.map_unmapped_fields_as_string setting removed",
            "details": "The deprecated `index.percolator.map_unmapped_fields_as_string` setting has been removed.",
            "impact": "Use `index.percolator.map_unmapped_fields_as_text` setting instead."
          },
          {
            "change": "Index thread pool removed",
            "details": "Internally, single-document index/delete/update requests are executed as bulk requests with a single-document payload. This means that these requests are executed on the bulk thread pool. As such, the indexing thread pool is no longer needed and has been removed. As such, the settings `thread_pool.index.size` and `thread_pool.index.queue_size` have been removed.",
            "impact": "Do not use `thread_pool.index.size` and `thread_pool.index.queue_size` settings."
          },
          {
            "change": "Write thread pool fallback removed",
            "details": "The bulk thread pool was replaced by the write thread pool in 6.3.0. However, for backwards compatibility reasons the name `bulk` was still usable as fallback settings `thread_pool.bulk.size` and `thread_pool.bulk.queue_size` for `thread_pool.write.size` and `thread_pool.write.queue_size`, respectively, and the system property `es.thread_pool.write.use_bulk_as_display_name` was available to keep the display output in APIs as `bulk` instead of `write`. These fallback settings and this system property have been removed.",
            "impact": "Use `thread_pool.write.size` and `thread_pool.write.queue_size` directly."
          },
          {
            "change": "Disabling memory-mapping setting renamed",
            "details": "The setting `node.store.allow_mmapfs` has been renamed to `node.store.allow_mmap`.",
            "impact": "Use `node.store.allow_mmap` instead."
          },
          {
            "change": "Http enabled setting removed",
            "details": "The setting `http.enabled` previously allowed disabling binding to HTTP, only allowing use of the transport client. This setting has been removed, as the transport client will be removed in the future, thus requiring HTTP to always be enabled.",
            "impact": "Do not use `http.enabled`. HTTP is always enabled."
          },
          {
            "change": "Http pipelining setting removed",
            "details": "The setting `http.pipelining` previously allowed disabling HTTP pipelining support. This setting has been removed, as disabling http pipelining support on the server provided little value.",
            "impact": "Do not use `http.pipelining`. The setting `http.pipelining.max_events` can still be used to limit the number of pipelined requests in-flight."
          },
          {
            "change": "Cross-cluster search settings renamed",
            "details": "The cross-cluster search remote cluster connection infrastructure is also used in cross-cluster replication. This means that the setting names `search.remote.*` used for configuring cross-cluster search belie the fact that they also apply to other situations where a connection to a remote cluster as used. Therefore, these settings have been renamed from `search.remote.*` to `cluster.remote.*`. For backwards compatibility purposes, we will fallback to `search.remote.*` if `cluster.remote.*` is not set. For any such settings stored in the cluster state, or set on dynamic settings updates, we will automatically upgrade the setting from `search.remote.*` to `cluster.remote.*`. The fallback settings will be removed in 8.0.0.",
            "impact": "Update settings from `search.remote.*` to `cluster.remote.*`."
          },
          {
            "change": "Audit logfile local node info settings removed",
            "details": "The following settings have been removed: `xpack.security.audit.logfile.prefix.emit_node_host_address`, `xpack.security.audit.logfile.prefix.emit_node_host_name`, `xpack.security.audit.logfile.prefix.emit_node_name`. Moreover, `xpack.security.audit.logfile.emit_node_name` has changed its default from `true` to `false`.",
            "impact": "Use `xpack.security.audit.logfile.emit_node_host_address`, `xpack.security.audit.logfile.emit_node_host_name`, `xpack.security.audit.logfile.emit_node_name` instead. Adjust `emit_node_name` if you relied on its `true` default."
          },
          {
            "change": "Security realms settings changed",
            "details": "The settings for all security realms must now include the realm type as part of the setting name, and the explicit `type` setting has been removed. A realm that was previous configured as: `xpack.security.authc.realms: ldap1: type: ldap order: 1 url: \"ldaps://ldap.example.com/\"`",
            "impact": "Must be migrated to: `xpack.security.authc.realms: ldap.ldap1: order: 1 url: \"ldaps://ldap.example.com/\"`. Any realm specific secure settings that have been stored in the elasticsearch keystore must be updated in a similar way."
          },
          {
            "change": "TLS/SSL default settings removed",
            "details": "The default TLS/SSL settings, which were prefixed by `xpack.ssl`, have been removed. The removal of these default settings also removes the ability for a component to fallback to a default configuration when using TLS.",
            "impact": "Each component (realm, transport, http, http client, etc) must now be configured with their own settings for TLS if it is being used."
          },
          {
            "change": "TLS v1.0 disabled by default",
            "details": "TLS version 1.0 is now disabled by default as it suffers from known security issues. The default protocols are now TLSv1.3 (if supported), TLSv1.2 and TLSv1.1.",
            "impact": "You can enable TLS v1.0 by configuring the relevant `ssl.supported_protocols` setting to include `\"TLSv1\"` for incoming HTTP connections, outgoing HTTP connections from Watcher, outgoing LDAP/Active Directory connections, outgoing HTTP connections to retrieve SAML metadata, outgoing HTTP connections to an OpenId Connect Provider, remote monitoring data, reindex from remote, and incoming connections between Elasticsearch nodes."
          },
          {
            "change": "Security on Trial Licenses behavior changed",
            "details": "On trial licenses, `xpack.security.enabled` defaults to `false`. In prior versions, a trial license would automatically enable security if either `xpack.security.transport.enabled` was `true`; or the trial license was generated on a version of X-Pack from 6.2 or earlier. This behaviour has been now removed.",
            "impact": "Security is only enabled if: `xpack.security.enabled` is `true`; or `xpack.security.enabled` is not set, and a gold or platinum license is installed. Explicitly set `xpack.security.enabled: true` if you rely on security being enabled with a trial license."
          },
          {
            "change": "Watcher notifications account settings removed",
            "details": "The following settings have been removed in favor of the secure variants: `xpack.notification.email.account.<id>.smtp.password`, `xpack.notification.hipchat.account.<id>.auth_token`, `xpack.notification.jira.account.<id>.url`, `xpack.notification.jira.account.<id>.user`, `xpack.notification.jira.account.<id>.password`, `xpack.notification.pagerduty.account.<id>.service_api_key`, `xpack.notification.slack.account.<id>.url`.",
            "impact": "Use the secure variants of these settings (e.g., `secure_password`, `secure_auth_token`, `secure_url`, `secure_user`, `secure_service_api_key`) and define them inside each cluster node’s keystore."
          },
          {
            "change": "Audit index output type removed",
            "details": "All the settings under the `xpack.security.audit.index` namespace have been removed. In addition, the `xpack.security.audit.outputs` setting has been removed as well. These settings enabled and configured the audit index output type. This output type has been removed because it was unreliable in certain scenarios and this could have lead to dropping audit events while the operations on the system were allowed to continue as usual.",
            "impact": "The recommended replacement is the use of the `logfile` audit output type and using other components from the Elastic Stack to handle the indexing part."
          },
          {
            "change": "Ingest User Agent processor defaults uses ecs output format",
            "details": "ECS format is now the default. The `ecs` setting for the user agent ingest processor now defaults to `true`.",
            "impact": "User agent processor output format will be ECS by default. Adjust ingest pipelines if you relied on the old format."
          },
          {
            "change": "action.master.force_local removed",
            "details": "The `action.master.force_local` setting was an undocumented setting, used internally by the tribe node to force reads to local cluster state (instead of forwarding to a master, which tribe nodes did not have). Since the tribe node was removed, this setting was removed too.",
            "impact": "Do not use `action.master.force_local`."
          },
          {
            "change": "Enforce cluster-wide shard limit",
            "details": "The cluster-wide shard limit is now enforced and not optional.",
            "impact": "The limit can still be adjusted as desired using the cluster settings API."
          },
          {
            "change": "HTTP Max content length setting is no longer parsed leniently",
            "details": "Previously, `http.max_content_length` would reset to 100mb if the setting was greater than `Integer.MAX_VALUE`. This leniency has been removed.",
            "impact": "Ensure `http.max_content_length` is within valid integer range."
          }
        ]
      },
      {
        "category": "Scripting changes",
        "changes": [
          {
            "change": "getDate() and getDates() removed",
            "details": "Fields of type `long` and `date` had `getDate()` and `getDates()` methods (for multi valued fields) to get an object with date specific helper methods for the current doc value. In 5.3.0, date fields were changed to expose this same date object directly when calling `doc[\"myfield\"].value`, and the getter methods for date objects were deprecated. These methods have now been removed.",
            "impact": "Instead, use `.value` on date fields, or explicitly parse `long` fields into a date object using `Instance.ofEpochMillis(doc[\"myfield\"].value)`."
          },
          {
            "change": "Accessing missing document values will throw an error",
            "details": "`doc['field'].value` will throw an exception if the document is missing a value for the field `field`.",
            "impact": "To check if a document is missing a value, you can use `doc['field'].size() == 0`."
          },
          {
            "change": "Script errors will return as 400 error codes",
            "details": "Malformed scripts, either in search templates, ingest pipelines or search requests, return `400 - Bad request` while they would previously return `500 - Internal Server Error`. This also applies for stored scripts.",
            "impact": "Clients should handle `400` status codes for script errors."
          },
          {
            "change": "getValues() removed",
            "details": "The `ScriptDocValues#getValues()` method is deprecated in 6.6 and will be removed in 7.0.",
            "impact": "Use `doc[\"foo\"]` in place of `doc[\"foo\"].values`."
          }
        ]
      },
      {
        "category": "Snapshot stats changes",
        "changes": [
          {
            "change": "Snapshot stats details are provided in a new structured way",
            "details": "Snapshot stats details are provided in a new structured way: `total` section for all the files that are referenced by the snapshot. `incremental` section for those files that actually needed to be copied over as part of the incremental snapshotting. In case of a snapshot that’s still in progress, there’s also a `processed` section for files that are in the process of being copied.",
            "impact": "Update clients parsing snapshot stats to use the new structured format."
          },
          {
            "change": "Deprecated number_of_files, processed_files, total_size_in_bytes and processed_size_in_bytes snapshot stats properties have been removed",
            "details": "Properties `number_of_files` and `total_size_in_bytes` are removed and should be replaced by values of nested object `total`. Properties `processed_files` and `processed_size_in_bytes` are removed and should be replaced by values of nested object `processed`.",
            "impact": "Use values from the nested `total` and `processed` objects instead."
          }
        ]
      },
      {
        "category": "High-level REST client changes",
        "changes": [
          {
            "change": "API methods accepting Header argument have been removed",
            "details": "All API methods accepting headers as a `Header` varargs argument, deprecated since 6.4, have been removed in favour of the newly introduced methods that accept instead a `RequestOptions` argument.",
            "impact": "In case you are not specifying any header, e.g. `client.index(indexRequest)` becomes `client.index(indexRequest, RequestOptions.DEFAULT)`. In case you are specifying headers e.g. `client.index(indexRequest, new Header(\"name\" \"value\"))` becomes `client.index(indexRequest, RequestOptions.DEFAULT.toBuilder().addHeader(\"name\", \"value\").build());`"
          },
          {
            "change": "Cluster Health API default to cluster level",
            "details": "The Cluster Health API used to default to `shards` level to ease migration from transport client that doesn’t support the `level` parameter and always returns information including indices and shards details. The `level` default value has been aligned with the Elasticsearch default level: `cluster`.",
            "impact": "Be aware that the default response will be at the cluster level. Explicitly set `level` if you need `shards` or `indices` level details."
          }
        ]
      },
      {
        "category": "Low-level REST client changes",
        "changes": [
          {
            "change": "Support for maxRetryTimeout removed from RestClient",
            "details": "`RestClient` and `RestClientBuilder` no longer support the `maxRetryTimeout` setting. The setting was removed as its counting mechanism was not accurate and caused issues while adding little value.",
            "impact": "Do not use `maxRetryTimeout`."
          },
          {
            "change": "Deprecated flavors of performRequest have been removed",
            "details": "We deprecated the flavors of `performRequest` and `performRequestAsync` that do not take `Request` objects in 6.4.0 in favor of the flavors that take `Request` objects because those methods can be extended without breaking backwards compatibility.",
            "impact": "Use `performRequest` and `performRequestAsync` methods that take `Request` objects."
          },
          {
            "change": "Removed setHosts",
            "details": "We deprecated `setHosts` in 6.4.0 in favor of `setNodes` because it supports host metadata used by the `NodeSelector`.",
            "impact": "Use `setNodes` instead."
          },
          {
            "change": "Minimum compiler version change",
            "details": "The minimum compiler version on the low-level REST client has been bumped to JDK 8.",
            "impact": "Ensure you are compiling with JDK 8 or higher."
          }
        ]
      },
      {
        "category": "Logging changes",
        "changes": [
          {
            "change": "New JSON format log files in log directory",
            "details": "Elasticsearch now will produce additional log files in JSON format. They will be stored in `*.json` suffix files. Following files should be expected now in log directory: `${cluster_name}_server.json`, `${cluster_name}_deprecation.json`, `${cluster_name}_index_search_slowlog.json`, `${cluster_name}_index_indexing_slowlog.json`, `${cluster_name}.log`, `${cluster_name}_deprecation.log`, `${cluster_name}_index_search_slowlog.log`, `${cluster_name}_index_indexing_slowlog.log`, `${cluster_name}_audit.json`, `gc.log`.",
            "impact": "You can configure which of these files are written by editing `log4j2.properties`. Adjust log parsing tools to consume the new JSON log files."
          },
          {
            "change": "Log files ending with *.log deprecated",
            "details": "Log files with the `.log` file extension using the old pattern layout format are now considered deprecated and the newly added JSON log file format with the `.json` file extension should be used instead. Note: GC logs which are written to the file `gc.log` will not be changed.",
            "impact": "Transition to using the new JSON log file format (`.json` extension)."
          },
          {
            "change": "Docker output in JSON format",
            "details": "All Docker console logs are now in JSON format. You can distinguish logs streams with the `type` field.",
            "impact": "Adjust Docker log parsing tools to handle JSON format."
          },
          {
            "change": "Audit plaintext log file removed, JSON file renamed",
            "details": "Elasticsearch no longer produces the `${cluster_name}_access.log` plaintext audit log file. The `${cluster_name}_audit.log` files also no longer exist; they are replaced by `${cluster_name}_audit.json` files. When auditing is enabled, auditing events are stored in these dedicated JSON log files on each node.",
            "impact": "Audit events are now stored in dedicated JSON log files. Update log parsing and monitoring for audit logs."
          }
        ]
      },
      {
        "category": "Node start up",
        "changes": [
          {
            "change": "Nodes with left-behind data or metadata refuse to start",
            "details": "Repurposing an existing node by changing `node.master` or `node.data` to `false` can leave lingering on-disk metadata and data around, which will not be accessible by the node’s new role. Beside storing non-accessible data, this can lead to situations where dangling indices are imported even though the node might not be able to host any shards, leading to a red cluster health. To avoid this, nodes with on-disk shard data and `node.data` set to `false` will refuse to start; nodes with on-disk index/shard data and both `node.master` and `node.data` set to `false` will refuse to start.",
            "impact": "Beware that such role changes done prior to the 7.0 upgrade could prevent node start up in 7.0. If repurposing a node, ensure no lingering data or metadata from previous roles."
          }
        ]
      },
      {
        "category": "Java Time Migration",
        "changes": [
          {
            "change": "Joda based date formatters are replaced with java ones",
            "details": "With Elasticsearch 7.0 all formatters are now java based, which means you will get exceptions when using deprecated formatters without checking the deprecation log in 6.7. In the worst case you may even end up with different dates. An example deprecation message looks like this, that is returned, when you try to use a date formatter that includes a lower case Y: 'Use of 'Y' (year-of-era) will change to 'y' in the next major version of Elasticsearch. Prefix your date format with '8' to use the new specifier.'",
            "impact": "So, instead of using `YYYY.MM.dd` you should use `8yyyy.MM.dd`. You can find more information about available formatting strings in the `DateTimeFormatter` javadocs."
          },
          {
            "change": "Date formats behavioural change",
            "details": "The `epoch_millis` and `epoch_second` formatters no longer support scientific notation. If you are using the century of era formatter in a date (`C`), this will no longer be supported. The year-of-era formatting character is a `Y` in Joda-Time, but a lowercase `y` in java time. The week-based-year formatting character is a lowercase `x` in Joda-Time, but an upper-case `Y` in java time.",
            "impact": "Update date formats to align with Java time behavior."
          },
          {
            "change": "Using time zones in the Java client",
            "details": "Timezones have to be specified as java time based zone objects. This means, instead of using a `org.joda.time.DateTimeZone` the use of `java.time.ZoneId` is required. Examples of possible uses are the `QueryStringQueryBuilder`, the `RangeQueryBuilder` or the `DateHistogramAggregationBuilder`, each of them allow for an optional timezone for that part of the search request.",
            "impact": "Update Java client code to use `java.time.ZoneId` for time zone specifications in queries and aggregations."
          },
          {
            "change": "Parsing aggregation buckets in the Java client",
            "details": "The date based aggregation buckets in responses used to be of type JodaTime. Due to migrating to java-time, the buckets are now of type `ZonedDateTime`. As the client is returning untyped objects here, you may run into class cast exceptions only when running the code, but not at compile time.",
            "impact": "Ensure you have proper test coverage for this in your own code and cast aggregation buckets to `ZonedDateTime`."
          },
          {
            "change": "Parsing GMT0 timezone with JDK8 is not supported",
            "details": "When you are running Elasticsearch 7 with Java 8, you are not able to parse the timezone `GMT0` properly anymore. The reason for this is a bug in the JDK, which has not been fixed for JDK8. This bug is fixed in JDK9 and later versions.",
            "impact": "Upgrade to JDK9 or later if you need to parse `GMT0` timezone, or avoid using `GMT0`."
          },
          {
            "change": "Scripting with dates should use java time based methods",
            "details": "If dates are used in scripting, a backwards compatibility layer has been added that emulates the Joda-Time methods, but logs a deprecation message as well to use the java time methods. The following methods will be removed in future versions of Elasticsearch and should be replaced: `getDayOfWeek()` (will be an enum instead of an int, use `getDayOfWeekEnum().getValue()`), `getMillis()` (use `toInstant().toEpochMilli()`), `getCenturyOfEra()` (use `get(ChronoField.YEAR_OF_ERA) / 100`), `getEra()` (use `get(ChronoField.ERA)`), `getHourOfDay()` (use `getHour()`), `getMillisOfDay()` (use `get(ChronoField.MILLI_OF_DAY)`), `getMillisOfSecond()` (use `get(ChronoField.MILLI_OF_SECOND)`), `getMinuteOfDay()` (use `get(ChronoField.MINUTE_OF_DAY)`), `getMinuteOfHour()` (use `getMinute()`), `getMonthOfYear()` (use `getMonthValue()`), `getSecondOfDay()` (use `get(ChronoField.SECOND_OF_DAY)`), `getSecondOfMinute()` (use `getSecond()`), `getWeekOfWeekyear()` (use `get(WeekFields.ISO.weekOfWeekBasedYear())`), `getWeekyear()` (use `get(WeekFields.ISO.weekBasedYear())`), `getYearOfCentury()` (use `get(ChronoField.YEAR_OF_ERA) % 100`), `getYearOfEra()` (use `get(ChronoField.YEAR_OF_ERA)`), `toString(String)` (use a `DateTimeFormatter`), `toString(String,Locale)` (use a `DateTimeFormatter`).",
            "impact": "Replace Joda-Time methods with their Java time equivalents in scripts."
          },
          {
            "change": "Negative epoch timestamps are no longer supported",
            "details": "With the switch to java time, support for negative timestamps has been removed.",
            "impact": "For dates before 1970, use a date format containing a year, not epoch timestamps."
          }
        ]
      }
    ]
  },
  {
    "version": "7.1",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.1.html",
    "breaking_changes": [
      {
        "category": "HTTP changes",
        "changes": [
          {
            "change": "Deprecation of old HTTP settings",
            "details": "The http.tcp_no_delay setting is deprecated in 7.1. It is replaced by http.tcp.no_delay.",
            "impact": "Update the `http.tcp_no_delay` setting to its replacement, `http.tcp.no_delay`."
          }
        ]
      },
      {
        "category": "Network changes",
        "changes": [
          {
            "change": "Deprecation of old network settings",
            "details": "The network.tcp.connect_timeout setting is deprecated in 7.1. This setting was a fallback setting for transport.connect_timeout.",
            "impact": "To change the default connection timeout for client connections, modify `transport.connect_timeout` instead of the deprecated `network.tcp.connect_timeout`."
          }
        ]
      },
      {
        "category": "Transport changes",
        "changes": [
          {
            "change": "Deprecation of old transport settings",
            "details": "The following settings are deprecated in 7.1. Each setting has a replacement setting that was introduced in 6.7:\n- `transport.tcp.port` is replaced by `transport.port`\n- `transport.tcp.compress` is replaced by `transport.compress`\n- `transport.tcp.connect_timeout` is replaced by `transport.connect_timeout`\n- `transport.tcp_no_delay` is replaced by `transport.tcp.no_delay`\n- `transport.profiles.profile_name.tcp_no_delay` is replaced by `transport.profiles.profile_name.tcp.no_delay`\n- `transport.profiles.profile_name.tcp_keep_alive` is replaced by `transport.profiles.profile_name.tcp.keep_alive`\n- `transport.profiles.profile_name.reuse_address` is replaced by `transport.profiles.profile_name.tcp.reuse_address`\n- `transport.profiles.profile_name.send_buffer_size` is replaced by `transport.profiles.profile_name.tcp.send_buffer_size`\n- `transport.profiles.profile_name.receive_buffer_size` is replaced by `transport.profiles.profile_name.tcp.receive_buffer_size`",
            "impact": "Update the deprecated `transport.tcp.*` and `transport.profiles.profile_name.tcp_*` settings to their new counterparts as listed in the details."
          }
        ]
      }
    ]
  },
  {
    "version": "7.2",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.2.html",
    "breaking_changes": [
      {
        "category": "Discovery changes",
        "changes": [
          {
            "change": "Only a single port may be given for each seed host.",
            "details": "In earlier versions you could include a range of ports in entries in the discovery.seed_hosts list, but Elasticsearch used only the first port in the range and unexpectedly ignored the rest. For instance if you set discovery.seed_hosts: \"10.11.12.13:9300-9310\" then Elasticsearch would only use 10.11.12.13:9300 for discovery.",
            "impact": "Seed host addresses containing port ranges are now rejected. Users must specify a single port for each seed host."
          }
        ]
      },
      {
        "category": "Index lifecycle management (ILM) deprecations",
        "changes": [
          {
            "change": "An ILM poll interval of less than one second is deprecated.",
            "details": "Setting indices.lifecycle.poll_interval to less than one second (1s) is now deprecated. If the indices.lifecycle.poll_interval cluster setting is too low, it can cause excessive load on a cluster.",
            "impact": "To avoid deprecation warnings, use a setting value of 1s or greater."
          }
        ]
      },
      {
        "category": "Ingest pipeline changes",
        "changes": [
          {
            "change": "The user_agent ingest processor’s ecs parameter is deprecated.",
            "details": "The ecs parameter for the user_agent ingest processor is deprecated and will be removed in 8.0. In 8.x, the user_agent ingest processor will only return Elastic Common Schema (ECS) fields.",
            "impact": "To avoid deprecation warnings, remove the parameter from your ingest pipelines."
          }
        ]
      }
    ]
  },
  {
    "version": "7.3",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.3.html",
    "breaking_changes": [
      {
        "category": "API changes",
        "changes": [
          {
            "change": "Transform API: format parameter no longer allowed for date_histogram transform pivot",
            "details": "It is no longer possible to supply the format parameter when you define a date_histogram transform pivot. Previously constructed transforms will still run but the configured format will be ignored.",
            "impact": "Remove the `format` parameter from `date_histogram` transform pivots. Existing transforms will ignore it."
          }
        ]
      },
      {
        "category": "Mapping changes",
        "changes": [
          {
            "change": "dense_vector field now requires dims parameter",
            "details": "dense_vector field now requires dims parameter, specifying the number of dimensions for document and query vectors for this field.",
            "impact": "When defining a `dense_vector` field, you must now specify the `dims` parameter."
          },
          {
            "change": "Defining multi-fields within multi-fields is deprecated",
            "details": "Previously, it was possible to define a multi-field within a multi-field. Defining chained multi-fields is now deprecated and will no longer be supported in 8.0.",
            "impact": "Remove all instances of fields that occur within a `fields` block from the mappings, either by flattening the chained fields blocks into a single level, or by switching to `copy_to` if appropriate."
          }
        ]
      },
      {
        "category": "Plugins changes",
        "changes": [
          {
            "change": "IndexStore and DirectoryService replaced by DirectoryFactory interface",
            "details": "IndexStore and DirectoryService have been replaced by a stateless and simple DirectoryFactory interface to create custom Lucene directory instances per shard.",
            "impact": "If you have custom plugins using `IndexStore` or `DirectoryService`, you must update them to use the new `DirectoryFactory` interface."
          }
        ]
      },
      {
        "category": "Search changes",
        "changes": [
          {
            "change": "The common query has been deprecated",
            "details": "The common query has been deprecated. The same functionality can be achieved by the match query if the total number of hits is not tracked.",
            "impact": "Migrate from `common` query to `match` query. Note that `match` query might not track the total number of hits."
          },
          {
            "change": "The cutoff_frequency parameter has been deprecated for match and multi_match queries",
            "details": "The cutoff_frequency parameter has been deprecated for match and multi_match queries. The same functionality can be achieved without any configuration provided that the total number of hits is not tracked.",
            "impact": "Remove the `cutoff_frequency` parameter from `match` and `multi_match` queries. Be aware that the total number of hits might not be tracked."
          }
        ]
      },
      {
        "category": "CCR changes",
        "changes": [
          {
            "change": "Directly modifying aliases of follower indices is no longer allowed",
            "details": "Aliases are now replicated to a follower from its leader, so directly modifying aliases on follower indices is no longer allowed.",
            "impact": "Do not directly modify aliases on follower indices. Aliases must be managed on the leader index and will be replicated."
          }
        ]
      },
      {
        "category": "Security deprecations",
        "changes": [
          {
            "change": "The transport.profiles.*.xpack.security.type setting is deprecated",
            "details": "The transport.profiles.*.xpack.security.type setting is now deprecated. In 8.0, the Java transport client will be removed. All client traffic will use the HTTP interface instead.",
            "impact": "Migrate any code for the Java transport client to use the HTTP interface. Then remove any transport profiles using the deprecated `transport.profiles.*.xpack.security.type` setting to avoid deprecation warnings."
          }
        ]
      }
    ]
  },
  {
    "version": "7.4",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.4.html",
    "breaking_changes": [
      {
        "category": "Plugins changes",
        "changes": [
          {
            "change": "TokenizerFactory now has a name() method that must be implemented",
            "details": "Most plugin-provided TokenizerFactory implementations will extend AbstractTokenizerFactory, which now takes a name parameter in its constructor.",
            "impact": "Plugin developers must update their TokenizerFactory implementations, especially those extending AbstractTokenizerFactory, to implement the name() method and include the name parameter in the constructor."
          }
        ]
      },
      {
        "category": "Search Changes",
        "changes": [
          {
            "change": "Forbid empty doc values in vector functions",
            "details": "If a document doesn’t have a value for a vector field (dense_vector or sparse_vector) on which a vector function is executed, an error will be thrown.",
            "impact": "Users must ensure that documents have values for vector fields when vector functions are applied, or handle the error gracefully in their applications."
          },
          {
            "change": "Use float instead of double for query vectors",
            "details": "Previously, vector functions like cosineSimilarity represented the query vector as an list of doubles. Now vector functions use floats, which matches how the stored document vectors are represented.",
            "impact": "Applications sending query vectors might need to ensure they are represented as floats for consistency, though client libraries may handle this conversion automatically. This primarily affects the internal representation."
          }
        ]
      },
      {
        "category": "Snapshot and Restore changes",
        "changes": [
          {
            "change": "The S3 repository plugin uses the DNS style access pattern by default",
            "details": "Starting in version 7.4 the repository-s3 plugin does not use the now-deprecated path-style access pattern by default. In versions 7.0, 7.1, 7.2 and 7.3 the repository-s3 plugin always used the path-style access pattern. This change was made necessary by AWS’s announcement that the path-style access pattern is deprecated and will be unsupported on buckets created after September 30th 2020.",
            "impact": "If your deployment only supports path-style access and is affected by this change, you must configure the S3 client setting path_style_access to true."
          }
        ]
      },
      {
        "category": "HTTP changes",
        "changes": [
          {
            "change": "Changes to Encoding Plus Signs in URLs",
            "details": "Starting in version 7.4, a + in a URL will be encoded as %2B by all REST API functionality. Prior versions handled a + as a single space.",
            "impact": "If your application requires handling + as a single space, you can return to the old behaviour by setting the system property es.rest.url_plus_as_space to true. Note that this behaviour is deprecated and will cease to be supported in version 8."
          }
        ]
      },
      {
        "category": "Cluster changes",
        "changes": [
          {
            "change": "Rerouting after starting a shard runs at lower priority",
            "details": "After starting each shard the elected master node must perform a reroute to search for other shards that could be allocated. In versions prior to 7.4 this task runs at priority URGENT, but starting in version 7.4 its priority is reduced to NORMAL. Additionally, before 7.4 the GET _cluster_health?wait_for_no_initializing_shards and GET _cluster/health?wait_for_no_relocating_shards APIs would return only once all pending reroutes have completed too, but starting in version 7.4 if you want to wait for the rerouting process to completely finish you should add the wait_for_events=languid query parameter when calling these APIs.",
            "impact": "In a cluster with an overloaded master, replica allocation might take longer. If you rely on `_cluster_health` APIs to wait for rerouting to complete, you must now add the `wait_for_events=languid` query parameter."
          }
        ]
      },
      {
        "category": "Allocation changes",
        "changes": [
          {
            "change": "Auto-release of read-only-allow-delete block",
            "details": "If a node exceeds the flood-stage disk watermark, Elasticsearch adds the index.blocks.read_only_allow_delete block to all its indices. From 7.4 onwards, this block is automatically removed when the node drops below the high watermark again. In earlier versions, this block would remain in place until manually removed.",
            "impact": "You can no longer rely on manually adding the `index.blocks.read_only_allow_delete` block to prevent writes to an index, as it may be automatically removed. You should use the `index.blocks.read_only` block instead. This behaviour can be disabled by setting the system property `es.disk.auto_release_flood_stage_block` to false."
          }
        ]
      },
      {
        "category": "Settings changes",
        "changes": [
          {
            "change": "Authentication realm name uniqueness is enforced",
            "details": "Authentication realm name uniqueness is now enforced. If you configure more than one realm of any type with the same name, the node fails to start.",
            "impact": "Users must ensure all authentication realms configured have unique names to prevent node startup failures."
          },
          {
            "change": "pidfile setting is being replaced by node.pidfile",
            "details": "To ensure that all settings are in a proper namespace, the pidfile setting is deprecated, and will be removed in version 8.0.0. Instead, use node.pidfile.",
            "impact": "Users should update their configurations to use `node.pidfile` instead of `pidfile`."
          },
          {
            "change": "processors setting is being replaced by node.processors",
            "details": "To ensure that all settings are in a proper namespace, the processors setting is deprecated, and will be removed in version 8.0.0. Instead, use node.processors.",
            "impact": "Users should update their configurations to use `node.processors` instead of `processors`."
          }
        ]
      },
      {
        "category": "Transform changes",
        "changes": [
          {
            "change": "Stats response format changes",
            "details": "The response format of the Get transform statistics is very different to previous versions: `task_state` and `indexer_state` are combined into a single `state` field. Within the `checkpointing` object, `current` is renamed to `last` and `in_progress` to `next`. The checkpoint number is now nested under `last` and `next`. `checkpoint_progress` is now reported in an object nested in the `next` checkpoint object.",
            "impact": "Applications parsing the `Get transform statistics` API response will need to be updated to handle the new JSON structure and field names."
          }
        ]
      },
      {
        "category": "Data frame analytics changes",
        "changes": [
          {
            "change": "Changes to progress reporting",
            "details": "The single integer `progress_percent` field at the top level of the data frame analytics job stats is replaced by a `progress` field that is an array of objects. Each object contains the phase name and `progress_percent` of one phase of the analytics.",
            "impact": "Applications parsing the data frame analytics job stats will need to be updated to handle the new `progress` array structure instead of the single `progress_percent` field."
          }
        ]
      }
    ]
  },
  {
    "version": "7.5",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.5.html",
    "breaking_changes": [
      {
        "category": "Allocation deprecations",
        "changes": [
          {
            "change": "The cluster.routing.allocation.disk.include_relocations setting is deprecated.",
            "details": "The cluster.routing.allocation.disk.include_relocations cluster setting is now deprecated. In future versions, Elasticsearch will account for the sizes of relocating shards when making allocation decisions based on the disk usage of nodes in the cluster. Currently, you can set cluster.routing.allocation.disk.include_relocations to false to disable this accounting. This can result in poor allocation decisions that might overshoot watermarks and require significant work to correct.",
            "impact": "To avoid deprecation warnings, discontinue use of the setting."
          }
        ]
      },
      {
        "category": "Search Changes",
        "changes": [
          {
            "change": "Stricter checking for wildcard queries on _index",
            "details": "Previously, a wildcard query on the _index field matched directly against the fully-qualified index name. Now, in order to match against remote indices like cluster:index, the query must contain a colon, as in cl*ster:inde*. This behavior aligns with the way indices are matched in the search endpoint.",
            "impact": "Adjust wildcard queries on the `_index` field to include a colon (e.g., `cl*ster:inde*`) when matching remote indices."
          }
        ]
      }
    ]
  },
  {
    "version": "7.6",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.6.html",
    "breaking_changes": [
      {
        "category": "Security changes",
        "changes": [
          {
            "change": "Elasticsearch API key privileges for derived keys",
            "details": "If you use an API key to create another API key (sometimes called a derived key), its behavior is impacted by the fix for CVE-2020-7009. When you make a request to create API keys, you can specify an expiration and privileges for the API key. Previously, when you created a derived key, it had no privileges. This behavior disregarded any privileges that you specified in the create API key API. As of 7.6.2, this behavior changes.",
            "impact": "To create a derived key, you must explicitly specify a role descriptor with no privileges: ... \"role_descriptors\": { \"no-privilege\": { } } ..."
          }
        ]
      },
      {
        "category": "Search changes",
        "changes": [
          {
            "change": "Aggregating and sorting on _id is deprecated",
            "details": "It’s possible to aggregate and sort on the built-in _id field by loading an expensive data structure called fielddata. This was deprecated in 7.6 and will be disallowed by default in 8.0.",
            "impact": "As an alternative, the _id field’s contents can be duplicated into another field with docvalues enabled (note that this does not apply to auto-generated IDs)."
          },
          {
            "change": "Deprecation of sparse vector fields",
            "details": "The sparse_vector field type has been deprecated and will be removed in 8.0. We have not seen much interest in this experimental field type, and don’t see a clear use case as it’s currently designed.",
            "impact": "If you have feedback or suggestions around sparse vector functionality, please let us know through GitHub or the discuss forums."
          },
          {
            "change": "Update to vector function signatures",
            "details": "The vector functions of the form function(query, doc['field']) are deprecated, and the form function(query, 'field') should be used instead.",
            "impact": "For example, cosineSimilarity(query, doc['field']) is replaced by cosineSimilarity(query, 'field')."
          },
          {
            "change": "Disallow use of the nGram and edgeNGram tokenizer names",
            "details": "The nGram and edgeNGram tokenizer names haven been deprecated with 7.6. Mappings for indices created after 7.6 will continue to work but emit a deprecation warning.",
            "impact": "The tokenizer name should be changed to the fully equivalent ngram or edge_ngram names for new indices and in index templates."
          }
        ]
      }
    ]
  },
  {
    "version": "7.7",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.7.html",
    "breaking_changes": [
      {
        "category": "Indices deprecations",
        "changes": [
          {
            "change": "Translog retention settings are deprecated.",
            "details": "The index.translog.retention.age and index.translog.retention.size index settings are now deprecated. These settings have been ignored since 7.4 in favor of soft deletes.",
            "impact": "To avoid deprecation warnings, discontinue use of the settings."
          }
        ]
      },
      {
        "category": "Logging changes",
        "changes": [
          {
            "change": "Loggers under org.elasticsearch.action now log at INFO level by default",
            "details": "The default log level for most loggers is INFO, but in earlier versions loggers in the org.elasticsearch.action.* hierarchy emitted log messages at DEBUG level by default. This sometimes resulted in a good deal of unnecessary log noise. From 7.7 onwards the default log level for logger in this hierarchy is now INFO, in line with most other loggers.",
            "impact": "If needed, you can recover the pre-7.7 default behaviour by adjusting your logging configuration."
          }
        ]
      },
      {
        "category": "Mapping changes",
        "changes": [
          {
            "change": "Validation for dynamic templates",
            "details": "Misconfiguration of dynamic templates was previously discovered only when indexing a document with an unmapped field. In Elasticsearch 8.0 and later versions, dynamic mappings have stricter validation, done at mapping update time. Invalid updates, such as using incorrect analyzer settings or unknown field types, will fail.",
            "impact": "For indices created in Elasticsearch 7.7 and later, invalid updates will succeed but emit a warning. Users should ensure dynamic templates are correctly configured to avoid validation warnings in 7.7+ and failures in 8.0+."
          }
        ]
      },
      {
        "category": "Settings changes",
        "changes": [
          {
            "change": "thread_pool.listener.size and thread_pool.listener.queue_size have been deprecated",
            "details": "The listener thread pool is no longer used internally by Elasticsearch. Therefore, these settings have been deprecated.",
            "impact": "You can safely remove these settings from the configuration of your nodes."
          },
          {
            "change": "cluster.remote.connect is deprecated in favor of node.remote_cluster_client",
            "details": "The setting cluster.remote.connect, used to configure whether the local node acts as a remote cluster client, is deprecated. It is replaced by node.remote_cluster_client, which serves the same purpose and identifies the local node as having the remote_cluster_client role.",
            "impact": "Users should switch to using node.remote_cluster_client instead of cluster.remote.connect."
          },
          {
            "change": "Authentication realm order will be a required config in version 8.0.0.",
            "details": "The order config will be required in version 8.0.0 for authentication realm configuration of any type. If the order config is missing for a realm, the node will fail to start.",
            "impact": "Users must configure the 'order' setting for all authentication realms before upgrading to 8.0.0 to prevent node startup failures."
          },
          {
            "change": "Authentication realm order uniqueness will be enforced in version 8.0.0.",
            "details": "The order config of authentication realms must be unique in version 8.0.0. If you configure more than one realm of any type with the same order, the node will fail to start.",
            "impact": "Users must ensure that the 'order' setting for all authentication realms is unique before upgrading to 8.0.0 to prevent node startup failures."
          },
          {
            "change": "Deprecation of insecure monitoring password setting",
            "details": "The auth.password setting for the monitoring HTTP exporter has been deprecated and will be removed in version 8.0.0. Please use the auth.secure_password setting instead.",
            "impact": "Users must switch from auth.password to auth.secure_password for the monitoring HTTP exporter before upgrading to 8.0.0."
          },
          {
            "change": "Settings used to defer cluster recovery pending a certain number of master nodes are deprecated.",
            "details": "The following cluster settings are now deprecated: gateway.expected_nodes, gateway.expected_master_nodes, gateway.recover_after_nodes, gateway.recover_after_master_nodes. It is safe to recover the cluster as soon as a majority of master-eligible nodes have joined, with no benefit in waiting for additional master-eligible nodes.",
            "impact": "To avoid deprecation warnings, discontinue use of the deprecated settings. If needed, use gateway.expected_data_nodes or gateway.recover_after_data_nodes to defer cluster recovery pending a certain number of data nodes."
          }
        ]
      },
      {
        "category": "Search changes",
        "changes": [
          {
            "change": "Consistent rounding of range queries on date_range fields",
            "details": "Range queries on date_range fields previously had slightly different boundaries than equivalent queries on pure date fields, especially with date math or dates not specifying up to the last millisecond. While queries on date fields rounded up to the latest millisecond for gt and lte boundaries, date_range fields did not. The behavior is now consistent for both field types.",
            "impact": "Queries on date_range fields will now round up to the latest millisecond for gt and lte boundaries, matching the behavior of date fields. Users should be aware of this change in boundary interpretation for range queries on date_range fields."
          },
          {
            "change": "Pipeline aggregation validation errors",
            "details": "Pipeline aggregation validation has moved to the coordinating node. Errors that previously returned HTTP 500s/Internal Server Errors now return 400/Bad Request. Additionally, a list of validation errors is now returned instead of just the first one encountered.",
            "impact": "Applications parsing pipeline aggregation validation errors should now expect HTTP 400 status codes instead of 500, and be prepared to handle a list of errors instead of a single one."
          }
        ]
      },
      {
        "category": "Highlighters changes",
        "changes": [
          {
            "change": "Ignored keyword values are no longer highlighted",
            "details": "If a keyword value was ignored during indexing because of its length (due to the ignore_above parameter), Elasticsearch no longer attempts to highlight it.",
            "impact": "Users should be aware that keyword values exceeding the ignore_above limit will no longer produce highlights."
          }
        ]
      }
    ]
  },
  {
    "version": "7.8",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.8.html",
    "breaking_changes": [
      {
        "category": "License Information changes",
        "changes": [
          {
            "change": "Displays Enterprise license as Platinum in /_xpack",
            "details": "The GET /_license endpoint displays Enterprise licenses as Platinum by default so that old clients (including Beats, Kibana and Logstash) know to interpret this new license type as if it were a Platinum license. This compatibility layer was not applied to the GET /_xpack/ endpoint, which also displays a license type and mode. #58217",
            "impact": "Users with old clients relying on the GET /_xpack/ endpoint for license type should update their clients or adjust their logic to correctly interpret 'Enterprise' as a Platinum-equivalent license type."
          }
        ]
      },
      {
        "category": "Aggregation changes",
        "changes": [
          {
            "change": "Privilege indices:admin/create will no longer allow the auto creation of indices",
            "details": "The privilege named indices:admin/create will no longer allow the auto creation of indices. Use create_index instead. #55858",
            "impact": "Users must use the `create_index` privilege instead of `indices:admin/create` for auto-creation of indices."
          },
          {
            "change": "value_count aggregation optimization",
            "details": "Scripts used in value_count will now receive a number if they are counting a numeric field and a GeoPoint if they are counting a geo_point fields. They used to always receive the String representation of those values. #54854",
            "impact": "Scripts used in `value_count` aggregations that expect string representations of numeric or geo_point fields will need to be updated to handle number or GeoPoint types respectively."
          }
        ]
      },
      {
        "category": "Mappings changes",
        "changes": [
          {
            "change": "The enabled mapping parameter cannot be changed for a root mapping.",
            "details": "Mapping requests that attempt to change the enabled mapping parameter for a root mapping will fail and return an error. Previously, Elasticsearch accepted mapping requests that attempted to change the enabled parameter of the root mapping. Theses changes were not applied, but such requests didn’t return an error.",
            "impact": "To avoid errors, do not submit mapping requests that change the `enabled` mapping parameter for a root mapping."
          },
          {
            "change": "The include_in_parent and include_in_root mapping parameters cannot be changed for nested fields.",
            "details": "Mapping requests that attempt to change the `include_in_parent` or `include_in_root` mapping parameter for a nested field will fail and return an error. Previously, Elasticsearch accepted mapping requests that attempted to change the `include_in_parent` or `include_in_root` parameter. Theses changes were not applied, but such requests didn’t return an error.",
            "impact": "To avoid errors, do not submit mapping requests that change the `include_in_parent` or `include_in_root` mapping parameter for nested fields."
          },
          {
            "change": "The get field mapping API’s local query parameter is deprecated.",
            "details": "The get field mapping API's `local` query parameter is deprecated and will be removed in Elasticsearch 8.0.0. The `local` parameter is a no-op. The API always retrieves field mappings locally.",
            "impact": "To avoid deprecation warnings, discontinue use of the `local` parameter in the get field mapping API."
          }
        ]
      },
      {
        "category": "Settings changes",
        "changes": [
          {
            "change": "The node.local_storage setting is deprecated.",
            "details": "The `node.local_storage` setting is deprecated. In Elasticsearch 8.0.0, all nodes require local storage.",
            "impact": "To avoid deprecation warnings, discontinue use of the `node.local_storage` setting."
          },
          {
            "change": "Several X-Pack settings no longer have any effect and are deprecated.",
            "details": "Basic X-Pack license features are always enabled for the default distribution and the following settings no longer have any effect: `xpack.enrich.enabled`, `xpack.flattened.enabled`, `xpack.ilm.enabled`, `xpack.monitoring.enabled`, `xpack.rollup.enabled`, `xpack.slm.enabled`, `xpack.sql.enabled`, `xpack.transform.enabled`, `xpack.vectors.enabled`. Previously, they could be set to false to disable the feature’s APIs in a cluster.",
            "impact": "To avoid deprecation warnings, discontinue use of these settings. If ILM was disabled to use another tool for Watcher indices, set `xpack.watcher.use_ilm_index_management` to `false` instead."
          }
        ]
      },
      {
        "category": "Changes to built-in users",
        "changes": [
          {
            "change": "The kibana user has been deprecated in favor of the kibana_system user.",
            "details": "The `kibana` user was historically used to authenticate Kibana to Elasticsearch. The name of this user was confusing, and was often mistakenly used to login to Kibana. We’ve replaced the `kibana` user with the `kibana_system` user to reduce confusion and to better align with other built-in system accounts.",
            "impact": "If `elasticsearch.username: kibana` was used in `kibana.yml`, update it to `elasticsearch.username: kibana_system`. A password must be explicitly set for the new `kibana_system` user as it does not preserve the old `kibana` user password."
          }
        ]
      },
      {
        "category": "Changes to built-in roles",
        "changes": [
          {
            "change": "The kibana_user role has been deprecated in favor of the kibana_admin role.",
            "details": "Users who were previously assigned the `kibana_user` role should instead be assigned the `kibana_admin` role. This role grants the same set of privileges as `kibana_user`, but has been renamed to better reflect its intended use.",
            "impact": "Assign users with the `kibana_user` role to the `kibana_admin` role and discontinue use of the `kibana_user` role."
          }
        ]
      },
      {
        "category": "Cluster coordination changes",
        "changes": [
          {
            "change": "The voting configuration exclusions API’s POST _cluster/voting_config_exclusions/<node_name> request path is deprecated.",
            "details": "The voting configuration exclusions API’s `POST _cluster/voting_config_exclusions/<node_name>` request path is now deprecated. To add a voting configuration exclusion, specify node names or node IDs using a query parameter instead: `POST _cluster/voting_config_exclusions?node_names=<node_names>` or `POST _cluster/voting_config_exclusions?node_ids=<node_ids>`.",
            "impact": "To avoid deprecation warnings, discontinue use of the `POST _cluster/voting_config_exclusions/<node_name>` request path and use query parameters (`node_names` or `node_ids`) instead."
          }
        ]
      },
      {
        "category": "Transforms changes",
        "changes": [
          {
            "change": "The max_page_search_size property is deprecated in the pivot transform configuration object",
            "details": "The `max_page_search_size` property within `pivot` is deprecated in the create transform and preview transform APIs.",
            "impact": "Use the `max_page_search_size` property within `settings` instead."
          }
        ]
      }
    ]
  },
  {
    "version": "7.9",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/breaking-changes-7.9.html",
    "breaking_changes": [
      {
        "category": "Indices changes",
        "changes": [
          {
            "change": "Elasticsearch includes built-in index templates for logs-*-* and metrics-*-*.",
            "details": "In 7.9, Elasticsearch added built-in index templates for the metrics-*-* and logs-*-* index patterns, each with a priority of 100. Elastic Agent uses these templates to create data streams.",
            "impact": "If you use Elastic Agent, assign your index templates a priority lower than 100 to avoid overriding the built-in templates. Otherwise, to avoid accidentally applying the built-in templates, use a non-overlapping index pattern or assign templates with an overlapping pattern a priority higher than 100. For example, if you don’t use Elastic Agent and want to use a template for the logs-* index pattern, assign your template a priority of 200. This ensures your template is applied instead of the built-in template for logs-*-*. To disable all built-in index and component templates, set stack.templates.enabled to false in elasticsearch.yml before start up. If the templates already exist, this setting ensures Elasticsearch does not recreate the built-in templates after deletion."
          }
        ]
      },
      {
        "category": "Script cache changes",
        "changes": [
          {
            "change": "The script.cache.max_size setting is deprecated.",
            "details": "The script.cache.max_size setting is deprecated. In Elasticsearch 8.0.0, this is set per-context.",
            "impact": "To avoid deprecation warnings, discontinue use of the script.cache.max_size setting. You may use script.context.$CONTEXT.cache_max_size for the particular context. For example, for the ingest context, use script.context.ingest.cache_max_size."
          },
          {
            "change": "The script.cache.expire setting is deprecated.",
            "details": "The script.cache.expire setting is deprecated. In Elasticsearch 8.0.0, this is set per-context.",
            "impact": "To avoid deprecation warnings, discontinue use of the script.cache.expire setting. You may use script.context.$CONTEXT.cache_expire for the particular context. For example, for the update context, use script.context.update.cache_expire."
          },
          {
            "change": "The script.max_compilations_rate setting is deprecated.",
            "details": "The script.max_compilations_rate setting is deprecated. In Elasticsearch 8.0.0, this is set per-context.",
            "impact": "To avoid deprecation warnings, discontinue use of the script.max_compilations_rate setting. You may use script.context.$CONTEXT.max_compilations_rate for the particular context. For example, for the processor_conditional context, use script.context.processor_conditional.max_compilations_rate."
          },
          {
            "change": "Mapping actions have been deprecated for the create_doc, create, index and write privileges.",
            "details": "In Elasticsearch 8.0.0, the following privileges will no longer allow users to explicitly update the mapping of an index: create_doc, create, index, write. Additionally, in Elasticsearch 8.0.0, the following privileges will no longer allow users to dynamically update the mapping of an index during indexing or ingest: create_doc, create, index. These privileges will continue to allow mapping actions on indices (but not on data streams) until Elasticsearch 8.0.0. However, deprecation warnings will be returned.",
            "impact": "To allow users to explicitly update the mapping of an index, grant the manage privilege. To dynamically update the mapping of an index during indexing or ingest, grant the auto_configure privilege and use index templates. This lets you dynamically update the index mapping based on the template’s mapping configuration."
          }
        ]
      },
      {
        "category": "Settings changes",
        "changes": [
          {
            "change": "Automatically importing dangling indices is disabled by default.",
            "details": "Automatically importing dangling indices into the cluster is unsafe and is now disabled by default. This feature will be removed entirely in Elasticsearch 8.0.0.",
            "impact": "Use the Dangling indices API to list, delete or import any dangling indices manually. Alternatively you can enable automatic imports of dangling indices, recovering the unsafe behaviour of earlier versions, by setting gateway.auto_import_dangling_indices to true. This setting is deprecated and will be removed in Elasticsearch 8.0.0. We do not recommend using this setting."
          },
          {
            "change": "Several node role settings are deprecated.",
            "details": "The following node role settings are now deprecated: node.data, node.ingest, node.master, node.ml, node.remote_cluster_client, node.transform, node.voting_only. Use the node.roles setting instead. If you used the deprecated node role settings on a 7.13 or later cluster, you will have a deprecation log message on each of your nodes indicating the exact replacement value for node.roles.",
            "impact": "To avoid deprecation warnings, discontinue use of the deprecated settings."
          }
        ]
      }
    ]
  },
  {
    "version": "7.10",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.10.html",
    "breaking_changes": [
      {
        "category": "Authentication changes",
        "changes": [
          {
            "change": "API keys now require a name property.",
            "details": "The name property is now required to create or grant an API key. For example: { \"...\": \"...\", \"api_key\": { \"name\": \"key-1\" } }",
            "impact": "To avoid errors, specify the name property when creating or granting API keys."
          }
        ]
      },
      {
        "category": "Java changes",
        "changes": [
          {
            "change": "The MappedFieldType#fielddataBuilder method now accepts a Supplier<SearchLookup> argument.",
            "details": "To support future feature development, the existing MappedFieldType#fielddataBuilder method now accepts a new Supplier<SearchLookup> argument.",
            "impact": "If you develop or maintain a mapper plugin, update your implementation of the MappedFieldType#fielddataBuilder method to accommodate the new signature."
          }
        ]
      },
      {
        "category": "Networking changes",
        "changes": [
          {
            "change": "The *.tcp.keep_idle and *.tcp.keep_interval settings are now limited to 300 seconds.",
            "details": "The {network,transport,http}.tcp.keep_idle and {network,transport,http}.tcp.keep_interval settings now have a maximum value of 300 seconds, equivalent to 5 minutes.",
            "impact": "If specified, ensure the {network,transport,http}.tcp.keep_idle and {network,transport,http}.tcp.keep_interval settings do not exceed 300 seconds. Setting {network,transport,http}.tcp.keep_idle or {network,transport,http}.tcp.keep_interval to a value greater than 300 seconds in elasticsearch.yml will result in an error on startup."
          }
        ]
      },
      {
        "category": "Search changes",
        "changes": [
          {
            "change": "The index.max_docvalue_fields_search setting now limits doc value fields returned by inner_hits or the top_hits aggregation.",
            "details": "The index.max_docvalue_fields_search setting limits the number of doc value fields retrieved by a search. Previously, this setting applied only to doc value fields returned by the docvalue_fields parameter in a top-level search. The setting now also applies to doc value fields returned by an inner_hits section or top_hits aggregation.",
            "impact": "If you use inner_hits or the top_hits aggregation, ensure index.max_docvalue_fields_search is configured correctly for your use case."
          }
        ]
      },
      {
        "category": "Cluster deprecations",
        "changes": [
          {
            "change": "The cluster.join.timeout setting is deprecated.",
            "details": "The cluster.join.timeout node setting is deprecated and will be removed in 8.0. In 7.x clusters, join attempts no longer time out.",
            "impact": "To avoid deprecation warnings, discontinue use of the setting."
          }
        ]
      },
      {
        "category": "Indices deprecations",
        "changes": [
          {
            "change": "REST API access to system indices is deprecated.",
            "details": "We are deprecating REST API access to system indices. Most REST API requests that attempt to access system indices will return a deprecation warning. Direct access to system indices will be prevented by default in a future major version. Some REST API endpoints (e.g., GET _cluster/health, GET {index}/_recovery) access system indices as part of their implementation and will not return the deprecation warning.",
            "impact": "To avoid deprecation warnings, do not use unsupported REST APIs to access system indices."
          }
        ]
      },
      {
        "category": "Machine learning deprecations",
        "changes": [
          {
            "change": "The allow_no_jobs and allow_no_datafeeds API parameters are deprecated.",
            "details": "The allow_no_jobs and allow_no_datafeeds parameters in machine learning APIs are deprecated in favor of allow_no_match. The old parameters are still accepted by the APIs but a deprecation warning is emitted when used. High-level REST client classes now send the new allow_no_match parameter.",
            "impact": "To avoid deprecation warnings, use the allow_no_match parameter."
          }
        ]
      },
      {
        "category": "Mapping deprecations",
        "changes": [
          {
            "change": "The boost parameter on field mappings has been deprecated.",
            "details": "Index-time boosts have been deprecated since the 5.x line, but it was still possible to declare field-specific boosts in the mappings. This is now deprecated as well, and will be removed entirely in 8.0.0. Mappings containing field boosts will continue to work in 7.x but will emit a deprecation warning.",
            "impact": "The boost setting should be removed from templates and mappings. Use boosts directly on queries instead."
          }
        ]
      },
      {
        "category": "Snapshot and restore deprecations",
        "changes": [
          {
            "change": "The repository stats API has been deprecated.",
            "details": "The repository stats API was introduced as an experimental API in 7.8.0. The repositories metering APIs now replace the repository stats API. The repository stats API has been deprecated and will be removed in 8.0.0.",
            "impact": "Use the repositories metering APIs. Discontinue use of the repository stats API."
          }
        ]
      }
    ]
  },
  {
    "version": "7.11",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.11.html",
    "breaking_changes": [
      {
        "category": "Machine learning changes",
        "changes": [
          {
            "change": "The trained models API parameter for_export is now renamed to exclude_generated.",
            "details": "The get trained models API no longer accepts for_export. Use exclude_generated instead.",
            "impact": "Use exclude_generated instead."
          }
        ]
      },
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "REST APIs that do not use a request body now return an error if a body is provided.",
            "details": "Several Elasticsearch REST APIs do not use a request body. In previous versions, you could provide a request body when calling these APIs, and Elasticsearch would ignore the body. These APIs now return an error if you provide a request body, even if empty.",
            "impact": "Update your application or workflow to avoid sending unneeded request bodies in REST API requests."
          }
        ]
      },
      {
        "category": "Search changes",
        "changes": [
          {
            "change": "Keyword fields with a custom normalizer will use the normalized form when highlighting.",
            "details": "Highlighters now use the same framework to load their values as the fields section of a search response. This means that normalization will be applied to the values of a keyword field; for example, a field configured with a lowercase normalizer will return highlighted snippets in lower case.",
            "impact": ""
          },
          {
            "change": "Internal fields used for text search acceleration are hidden.",
            "details": "Text fields can add internal subfields using extra analysis to speed up prefix and phrase searches. Previously these were exposed to the field caps API and were available for searching directly. However, they did not implement all query types and could return bad results or throw errors if used via the query DSL. These subfields are now internal only and cannot be invoked as searchable fields in queries.",
            "impact": ""
          },
          {
            "change": "The significant text aggregation now throws an error if applied to a numeric field.",
            "details": "The significant text aggregation could previously be applied to a fields that were defined as numeric, which made little sense and would always return an empty result. Given that applying a text-specific aggregation to a non-text field is almost certainly a mistake, this has now been changed to throw an error.",
            "impact": ""
          }
        ]
      },
      {
        "category": "Transform changes",
        "changes": [
          {
            "change": "Transforms now write group_by dates as strings.",
            "details": "Transforms now write dates used in a group_by as formatted ISO strings instead of epoch_millis values. Previously constructed transforms will still use epoch_millis values. You can configure and change the output format in the settings of the transform.",
            "impact": "You can configure and change the output format in the settings of the transform."
          }
        ]
      }
    ]
  },
  {
    "version": "7.12",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.12.html",
    "breaking_changes": [
      {
        "category": "Engine changes",
        "changes": [
          {
            "change": "Force-merges on frozen and searchable snapshot indices will fail if merging is required.",
            "details": "In earlier versions a force-merge on a frozen index or a searchable snapshot index would incorrectly yield a successful response without performing the requested merge. This bug is fixed in version 7.12: from this version onwards a force-merge on these immutable indices will fail if the requested merge is not a no-op.",
            "impact": "Operations attempting to force-merge frozen or searchable snapshot indices that previously incorrectly reported success will now correctly fail if a merge is actually required. Users should be aware of this change in behavior."
          }
        ]
      },
      {
        "category": "Search changes",
        "changes": [
          {
            "change": "The search APIs fields parameter returns fields inside nested fields grouped together.",
            "details": "In earlier versions, fields retrieved via fields in the search API were returned as a flat list. From 7.12 on, fields inside an object that is mapped using the nested field type are grouped together to maintain the independence of each object inside the original nested array.",
            "impact": "Applications parsing search results that use the `fields` parameter with nested fields must be updated to handle the new grouped structure, where fields within nested objects are no longer returned as a flat list."
          }
        ]
      },
      {
        "category": "SSL/TLS changes",
        "changes": [
          {
            "change": "TLSv1.1 and TLSv1.0 are disabled in the bundled JDK",
            "details": "As of Elasticsearch 7.12.1, when using the bundled JDK, TLSv1.1 and TLSv1.0 are disabled by default. This may affect SSL connections to the Rest API for some older clients. It also has the potential to affect outgoing connections such as Watcher webhooks, LDAP authentication or access to snapshot repositories. Most Elasticsearch deployments will not be affected by this change, as these older TLS versions have known vulnerabilities and are no longer heavily used.",
            "impact": "Clients or outgoing connections (e.g., Watcher webhooks, LDAP, snapshot repositories) that rely on TLSv1.1 or TLSv1.0 will fail to connect. If necessary, these older TLS versions can be re-enabled by following the instructions in 'Enabling additional SSL/TLS versions on your JDK'."
          }
        ]
      }
    ]
  },
  {
    "version": "7.13",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.13.html",
    "breaking_changes": [
      {
        "category": "Mapping changes",
        "changes": [
          {
            "change": "Geo mappers no longer accept external values from multifields.",
            "details": "In earlier versions, geo fields could theoretically be used as a subfield if their parent field set a geometry object as an external value during parsing. This functionality was unused within the Elasticsearch codebase and blocked required changes to allow index-time scripts on geo_point fields, so it has been removed.",
            "impact": ""
          },
          {
            "change": "Geopoint mappers pass geohashes to subfields one-by-one.",
            "details": "In earlier versions, a multiply-valued geopoint field would pass its values as geohashes to subfields by combining them in to a single comma-delimited string. These are now passed one-by-one as single geohash strings.",
            "impact": ""
          }
        ]
      },
      {
        "category": "SSL/TLS changes",
        "changes": [
          {
            "change": "TLSv1.1 and TLSv1.0 are disabled in the bundled JDK",
            "details": "When using the bundled JDK, TLSv1.1 and TLSv1.0 are disabled by default. This may affect SSL connections to the Rest API for some older clients. It also has the potential to affect outgoing connections such as Watcher webhooks, LDAP authentication or access to snapshot repositories. Most Elasticsearch deployments will not be affected by this change, as these older TLS versions have known vulnerabilities and are no longer heavily used.",
            "impact": "For instructions on how to enable these older TLS versions in your Elasticsearch cluster, see Enabling additional SSL/TLS versions on your JDK ."
          }
        ]
      },
      {
        "category": "Settings changes",
        "changes": [
          {
            "change": "xpack.searchable.snapshot.shared_cache.size is no longer a supported user setting for Elasticsearch Service",
            "details": "You can no longer configure xpack.searchable.snapshot.shared_cache.size on Elasticsearch Service deployments running Elasticsearch 7.13 or a later version. This setting reserves disk space for the shared cache of partially mounted indices. Elasticsearch now automatically configures the setting to 90% of total disk space for frozen data tier nodes and to 0b for non-frozen data tier nodes.",
            "impact": "If you use Elasticsearch Service and previously configured xpack.searchable.snapshot.shared_cache.size , remove it from your user settings before upgrading to 7.13 or a later version. Otherwise, attempts to upgrade the deployment will fail and return an error."
          },
          {
            "change": "Changes to the frozen tier and multiple data paths",
            "details": "Elasticsearch 7.12 included a technical preview of the frozen tier, being able to use partially mounted indices (searchable snapshots mounted with the shared cache option). Trying out this feature required configuring a shared cache using the xpack.searchable.snapshot.shared_cache.size setting. In Elasticsearch 7.13+, having a non-zero xpack.searchable.snapshot.shared_cache.size on nodes utilizing multiple data paths ( path.data points to multiple locations) is no longer supported and will prevent the node from starting. If you do not utilize multiple data paths this will not affect you. Likewise, if you have not set xpack.searchable.snapshot.shared_cache.size and have not configured dedicated frozen nodes (nodes with the data_frozen role and no other data roles) this will not affect you.",
            "impact": ""
          }
        ]
      }
    ]
  },
  {
    "version": "7.14",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.14.html",
    "breaking_changes": [
      {
        "category": "Cluster changes",
        "changes": [
          {
            "change": "Version barrier applies to all upgrades",
            "details": "If a failure occurs during a rolling upgrade then Elasticsearch may prematurely conclude that the upgrade is complete and enable functionality which is incompatible with earlier versions. In versions before 7.14 Elasticsearch would accept older nodes into the cluster after completing the upgrade despite having enabled incompatible functionality, as long as the older nodes were from the same major series. From 7.14 onwards Elasticsearch will not accept any older nodes into a fully-upgraded cluster.",
            "impact": "If a failure occurs during a rolling upgrade and older nodes cannot rejoin the cluster then you must upgrade the affected nodes. Once upgraded, they will join the cluster again."
          }
        ]
      },
      {
        "category": "Cross-cluster replication (CCR) deprecations",
        "changes": [
          {
            "change": "Auto-follow remote system indices is deprecated.",
            "details": "Currently, remote system indices matching an auto-follow pattern are configured as a follower index automatically, this behavior is deprecated.",
            "impact": "In 8.0.0, remote system indices matching an auto-follow pattern won’t be configured as a follower index automatically. In order to adapt to this new behaviour it is advised to exclude patterns matching system indices such as .tasks and kibana-* ."
          }
        ]
      },
      {
        "category": "Core deprecations",
        "changes": [
          {
            "change": "Setting cluster.routing.allocation.disk.watermark.enable_for_single_data_node=false is deprecated.",
            "details": "The setting cluster.routing.allocation.disk.watermark.enable_for_single_data_node should never be explicitly set to false. In 8.0, the only legal value will be true. In a future release, the setting will be removed completely, with same behavior as if the setting was true .",
            "impact": "If your cluster has a single data node then set cluster.routing.allocation.disk.watermark.enable_for_single_data_node: true to opt in to the future behaviour today. If you wish to disable the disk watermarks then set cluster.routing.allocation.disk.threshold_enabled: false . If your cluster has multiple data nodes then the cluster.routing.allocation.disk.watermark.enable_for_single_data_node setting has no effect and you should discontinue its use."
          }
        ]
      },
      {
        "category": "Search deprecations",
        "changes": [
          {
            "change": "The geo_bounding_box query’s type parameter is deprecated.",
            "details": "The geo_bounding_box query’s type parameter has been deprecated in 7.14.0. This parameter is a no-op and has no effect on the query.",
            "impact": "Discontinue use of the type parameter in geo_bounding_box queries."
          }
        ]
      },
      {
        "category": "Security deprecations",
        "changes": [
          {
            "change": "Having security disabled by default on basic and trial licenses is deprecated.",
            "details": "Elasticsearch security features are disabled by default when operating on a basic or trial license if xpack.security.enabled is not set to true . In Elasticsearch 8.0.0, security features will be enabled by default for all licenses unless you explicitly disable security by setting xpack.security.enabled to false (not recommended). Before migrating to Elasticsearch 8.0.0, you must explicitly set a value for xpack.security.enabled or Elasticsearch will fail to start. If you have already enabled security features by explicitly setting xpack.security.enabled to true , your configuration will be respected in 8.0.0. Otherwise, on every node in your cluster, enable Elasticsearch security features by setting xpack.security.enabled to true in elasticsearch.yml . You then configure security for the transport layer on each node, which requires generating a certificate authority (if you don’t have one), creating node security certificates, and configuring internode communication. Refer to set up basic security for the Elastic Stack for steps on configuring security.",
            "impact": "Before migrating to Elasticsearch 8.0.0, you must explicitly set a value for xpack.security.enabled or Elasticsearch will fail to start. If you have already enabled security features by explicitly setting xpack.security.enabled to true , your configuration will be respected in 8.0.0. Otherwise, on every node in your cluster, enable Elasticsearch security features by setting xpack.security.enabled to true in elasticsearch.yml . You then configure security for the transport layer on each node, which requires generating a certificate authority (if you don’t have one), creating node security certificates, and configuring internode communication. Refer to set up basic security for the Elastic Stack for steps on configuring security."
          },
          {
            "change": "Configuring a realm name with a leading underscore is deprecated.",
            "details": "Elasticsearch creates \"synthetic\" realm names on the fly for services like API keys. These synthetic realm names are prefixed with an underscore. Currently, user configured realms can also be given a name with a leading underscore. This creates confusion since realm names are meant to be unique for a node.",
            "impact": "Configuring a realm name with a leading underscore is deprecated. In a future release of Elasticsearch it will result in an error on startup if any user configured realm has a name with a leading underscore."
          }
        ]
      }
    ]
  },
  {
    "version": "7.15",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.15.html",
    "breaking_changes": [
      {
        "category": "Indices deprecations",
        "changes": [
          {
            "change": "Indices created in Elasticsearch 6.x and earlier versions are deprecated.",
            "details": "In 8.x, Elasticsearch will only read indices created in version 7.0 or above. An 8.x node will not start in the presence of indices created in 6.x or earlier versions of Elasticsearch.",
            "impact": "Before upgrading to an 8.x version, reindex any index created in 6.x or earlier versions with Elasticsearch 7.x. If you no longer need the index, delete it instead. You can use the get index API to check the Elasticsearch version in which an index was created. GET *,-.*?human=true&filter_path=**.settings.index.version.created_string"
          },
          {
            "change": "The simpleifs index store type is deprecated.",
            "details": "The simplefs value for the index.store.type index setting is now deprecated. Use the niofs value for superior or equivalent performance instead.",
            "impact": "To avoid deprecation warnings, discontinue use of the simpleifs store type in new indices or index templates. Reindex any index using simplefs into one with another store type."
          }
        ]
      },
      {
        "category": "Security deprecations",
        "changes": [
          {
            "change": "The accept_default_password setting is deprecated.",
            "details": "In 6.0, we deprecated the accept_default_password cluster setting. We removed support for default passwords in 6.0 but did not remove the setting for backwards compatibility. In 8.0, we will remove the setting.",
            "impact": "To avoid deprecation warnings, discontinue use of the setting."
          },
          {
            "change": "Native role cache settings are deprecated.",
            "details": "In 5.2, we deprecated the following cluster settings: xpack.security.authz.store.roles.index.cache.max_size xpack.security.authz.store.roles.index.cache.ttl These native role cache settings have been unused since 5.2, but we did not remove the settings for backwards compatibility. In 8.0, we will remove the settings.",
            "impact": "To avoid deprecation warnings, discontinue use of the settings."
          }
        ]
      },
      {
        "category": "Settings deprecations",
        "changes": [
          {
            "change": "Fractional byte size values are deprecated.",
            "details": "In 6.2, we deprecated support for fractional byte size values, such as 23.5pb, in: Cluster settings Index settings Cluster state metadata, such as an ILM policy, that support byte size values",
            "impact": "To avoid deprecation warnings, discontinue use of fractional byte size values in your configurations. Update any existing configurations to use whole values."
          }
        ]
      }
    ]
  },
  {
    "version": "7.16",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.16.html",
    "breaking_changes": [
      {
        "category": "Settings changes",
        "changes": [
          {
            "change": "The cluster.routing.allocation.disk.threshold_enabled cluster setting is now operator only.",
            "details": "Orchestrated environments such as Elasticsearch Service and Elastic Cloud Enterprise rely on the disk thresholds in Elasticsearch to operate the cluster correctly. For example the disk thresholds help determine how large an auto-scaled cluster should be. Disabling these disk thresholds prevents the orchestration system from working correctly, so starting in 7.16.0 the cluster.routing.allocation.disk.threshold_enabled setting is an operator only setting which cannot be changed by end-users.",
            "impact": "Discontinue use of this setting in orchestrated environments such as Elasticsearch Service and Elastic Cloud Enterprise. Contact the environment administrator for help with disk space management if needed. This change has no impact on users outside of orchestrated environments."
          }
        ]
      },
      {
        "category": "High Level REST Client changes",
        "changes": [
          {
            "change": "The XContent API is renamed and breaks imports when upgrading.",
            "details": "The XContent library exported package is renamed from org.elasticsearch.common.xcontent to org.elasticsearch.xcontent . This change breaks imports when migrating to Elasticsearch 7.16.",
            "impact": "If you’re maintaining a Java client application that uses the Java High Level Rest Client (HLRC), update any import statements in your Java source code that match: import org.elasticsearch.common.xcontent.<class> to instead use: import org.elasticsearch.xcontent.<class> This is the minimum required change. You must then recompile your source code to work with Elasticsearch 7.17. A more permanent solution is to migrate from the (HLRC) entirely."
          },
          {
            "change": "The ignore_throttled parameter is deprecated and changes indices options sent to Elasticsearch",
            "details": "In #77864 the High Level Rest Client was changed to only send indices options if the request differed from the default request options. However, in some cases the default options for the HLRC request object inadvertently differ from the effective options of the Elasticsearch APIs, meaning that it is possible for the API response to differ.",
            "impact": "If you use the HLRC and have a differing response due to indices options, you can update the options using the indicesOptions(...) method, as shown below: // Previously: highLevelClient.indices().exists(request, RequestOptions.DEFAULT); // With indices options (change boolean options as needed): final var requestWithOptions = request.indicesOptions(IndicesOptions.fromOptions(false, false, true, false)); highLevelClient.indices().exists(requestWithOptions, RequestOptions.DEFAULT); A more permanent solution is to migrate from the (HLRC) entirely."
          }
        ]
      }
    ]
  },
  {
    "version": "7.17",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/7.17/migrating-7.17.html",
    "breaking_changes": [
      {
        "category": "Packaging changes",
        "changes": [
          {
            "change": "The Windows MSI installer package is no longer available.",
            "details": "We no longer release Windows MSI installer packages for Elasticsearch. These packages were previously released in beta and didn’t receive widespread adoption.",
            "impact": "To install Elasticsearch on Windows, use the .zip archive package instead."
          }
        ]
      }
    ]
  },
  {
    "version": "8.0",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.0.html",
    "breaking_changes": [
      {
        "category": "Cluster and node setting changes",
        "changes": [
          {
            "change": "action.destructive_requires_name now defaults to true .",
            "details": "The default for the action.destructive_requires_name setting changes from false to true in Elasticsearch 8.0.0. Previously, defaulting to false allowed users to use wildcard patterns to delete, close, or change index blocks on indices. To prevent the accidental deletion of indices that happen to match a wildcard pattern, we now default to requiring that destructive operations explicitly name the indices to be modified.",
            "impact": "To use wildcard patterns for destructive actions, set action.destructive_requires_name to false using the cluster settings API."
          },
          {
            "change": "You can no longer set xpack.searchable.snapshot.shared_cache.size on non-frozen nodes.",
            "details": "You can no longer set xpack.searchable.snapshot.shared_cache.size on a node that doesn’t have the data_frozen node role. This setting reserves disk space for the shared cache of partially mounted indices. Elasticsearch only allocates partially mounted indices to nodes with the data_frozen role.",
            "impact": "Remove xpack.searchable.snapshot.shared_cache.size from elasticsearch.yml for nodes that don’t have the data_frozen role. Specifying the setting on a non-frozen node will result in an error on startup."
          },
          {
            "change": "indices.query.bool.max_clause_count is deprecated and has no effect.",
            "details": "Elasticsearch will now dynamically set the maximum number of allowed clauses in a query, using a heuristic based on the size of the search thread pool and the size of the heap allocated to the JVM. This limit has a minimum value of 1024 and will in most cases be larger (for example, a node with 30Gb RAM and 48 CPUs will have a maximum clause count of around 27,000). Larger heaps lead to higher values, and larger thread pools result in lower values. In previous versions of Lucene you could get around this limit by nesting boolean queries within each other, but the limit is now based on the total number of leaf queries within the query as a whole and this workaround will no longer help. Specifying indices.query.bool.max_clause_count will have no effect but will generate deprecation warnings.",
            "impact": "Queries with many clauses should be avoided whenever possible. If you previously bumped this setting to accommodate heavy queries, you might need to increase the amount of memory available to Elasticsearch, or to reduce the size of your search thread pool so that more memory is available to each concurrent search. To avoid these warnings, remove the setting from elasticsearch.yml during an upgrade or node restart."
          },
          {
            "change": "indices.lifecycle.poll_interval must be greater than 1s .",
            "details": "Setting indices.lifecycle.poll_interval too low can cause excessive load on a cluster. The poll interval must now be at least 1s (one second).",
            "impact": "Set indices.lifecycle.poll_interval setting to 1s or greater in elasticsearch.yml or through the cluster update settings API . Setting indices.lifecycle.poll_interval to less than 1s in elasticsearch.yml will result in an error on startup. Cluster update settings API requests that set indices.lifecycle.poll_interval to less than 1s will return an error."
          },
          {
            "change": "The file and native realms are now enabled unless explicitly disabled.",
            "details": "The file and native realms are now enabled unless explicitly disabled. If explicitly disabled, the file and native realms remain disabled at all times. Previously, the file and native realms had the following implicit behaviors: If the file and native realms were not configured, they were implicitly disabled if any other realm was configured. If no other realm was available because realms were either not configured, not permitted by license, or explicitly disabled, the file and native realms were enabled, even if explicitly disabled.",
            "impact": "To explicitly disable the file or native realm, set the respective file.<realm-name>.enabled or native.<realm-name>.enabled setting to false under the xpack.security.authc.realms namespace in elasticsearch.yml . The following configuration example disables the native realm and the file realm. xpack.security.authc.realms: native.realm1.enabled: false file.realm2.enabled: false ..."
          },
          {
            "change": "The realm order setting is now required.",
            "details": "The xpack.security.authc.realms.{type}.{name}.order setting is now required and must be specified for each explicitly configured realm. Each value must be unique.",
            "impact": "The cluster will fail to start if the requirements are not met. For example, the following configuration is invalid: xpack.security.authc.realms.kerberos.kerb1: keytab.path: es.keytab remove_realm_name: false And must be configured as: xpack.security.authc.realms.kerberos.kerb1: order: 0 keytab.path: es.keytab remove_realm_name: false"
          },
          {
            "change": "cluster.routing.allocation.disk.include_relocations has been removed.",
            "details": "Elasticsearch now always accounts for the sizes of relocating shards when making allocation decisions based on the disk usage of the nodes in the cluster. In earlier versions, you could disable this by setting cluster.routing.allocation.disk.include_relocations to false . That could result in poor allocation decisions that could overshoot watermarks and require significant extra work to correct. The cluster.routing.allocation.disk.include_relocations setting has been removed.",
            "impact": "Remove the cluster.routing.allocation.disk.include_relocations setting. Specifying this setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "cluster.join.timeout has been removed.",
            "details": "The cluster.join.timeout setting has been removed. Join attempts no longer time out.",
            "impact": "Remove cluster.join.timeout from elasticsearch.yml ."
          },
          {
            "change": "discovery.zen settings have been removed.",
            "details": "All settings under the discovery.zen namespace are no longer supported. They existed only only for BWC reasons in 7.x. This includes: discovery.zen.minimum_master_nodes discovery.zen.no_master_block discovery.zen.hosts_provider discovery.zen.publish_timeout discovery.zen.commit_timeout discovery.zen.publish_diff.enable discovery.zen.ping.unicast.concurrent_connects discovery.zen.ping.unicast.hosts.resolve_timeout discovery.zen.ping.unicast.hosts discovery.zen.ping_timeout discovery.zen.unsafe_rolling_upgrades_enabled discovery.zen.fd.connect_on_network_disconnect discovery.zen.fd.ping_interval discovery.zen.fd.ping_timeout discovery.zen.fd.ping_retries discovery.zen.fd.register_connection_listener discovery.zen.join_retry_attempts discovery.zen.join_retry_delay discovery.zen.join_timeout discovery.zen.max_pings_from_another_master discovery.zen.send_leave_request discovery.zen.master_election.wait_for_joins_timeout discovery.zen.master_election.ignore_non_master_pings discovery.zen.publish.max_pending_cluster_states discovery.zen.bwc_ping_timeout",
            "impact": "Remove the discovery.zen settings from elasticsearch.yml . Specifying these settings will result in an error on startup."
          },
          {
            "change": "http.content_type.required has been removed.",
            "details": "The http.content_type.required setting was deprecated in Elasticsearch 6.0 and has been removed in Elasticsearch 8.0. The setting was introduced in Elasticsearch 5.3 to prepare users for Elasticsearch 6.0, where content type auto detection was removed for HTTP requests.",
            "impact": "Remove the http.content_type.required setting from elasticsearch.yml . Specifying this setting will result in an error on startup."
          },
          {
            "change": "http.tcp_no_delay has been removed.",
            "details": "The http.tcp_no_delay setting was deprecated in 7.x and has been removed in 8.0. Use http.tcp.no_delay instead.",
            "impact": "Replace the http.tcp_no_delay setting with http.tcp.no_delay . Specifying http.tcp_no_delay in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "network.tcp.connect_timeout has been removed.",
            "details": "The network.tcp.connect_timeout setting was deprecated in 7.x and has been removed in 8.0. This setting was a fallback setting for transport.connect_timeout .",
            "impact": "Remove the network.tcp.connect_timeout setting. Use the transport.connect_timeout setting to change the default connection timeout for client connections. Specifying network.tcp.connect_timeout in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "node.max_local_storage_nodes has been removed.",
            "details": "The node.max_local_storage_nodes setting was deprecated in 7.x and has been removed in 8.0. Nodes should be run on separate data paths to ensure that each node is consistently assigned to the same data path.",
            "impact": "Remove the node.max_local_storage_nodes setting. Specifying this setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The accept_default_password setting has been removed.",
            "details": "The xpack.security.authc.accept_default_password setting has not had any affect since the 6.0 release of Elasticsearch and is no longer allowed.",
            "impact": "Remove the xpack.security.authc.accept_default_password setting from elasticsearch.yml . Specifying this setting will result in an error on startup."
          },
          {
            "change": "The roles.index.cache.* settings have been removed.",
            "details": "The xpack.security.authz.store.roles.index.cache.max_size and xpack.security.authz.store.roles.index.cache.ttl settings have been removed. These settings have been redundant and deprecated since the 5.2 release of Elasticsearch.",
            "impact": "Remove the xpack.security.authz.store.roles.index.cache.max_size and xpack.security.authz.store.roles.index.cache.ttl settings from elasticsearch.yml . Specifying these settings will result in an error on startup."
          },
          {
            "change": "The transport.profiles.*.xpack.security.type setting has been removed.",
            "details": "The transport.profiles.*.xpack.security.type setting is no longer supported. The Transport Client has been removed and all client traffic now uses the HTTP transport. Transport profiles using this setting should be removed.",
            "impact": "Remove the transport.profiles.*.xpack.security.type setting from elasticsearch.yml . Specifying this setting in a transport profile will result in an error on startup."
          },
          {
            "change": "The nameid_format SAML realm setting no longer has a default value.",
            "details": "In SAML, Identity Providers (IdPs) can either be explicitly configured to release a NameID with a specific format, or configured to attempt to conform with the requirements of a Service Provider (SP). The SP declares its requirements in the NameIDPolicy element of a SAML Authentication Request. In Elasticsearch, the nameid_format SAML realm setting controls the NameIDPolicy value. Previously, the default value for nameid_format was urn:oasis:names:tc:SAML:2.0:nameid-format:transient . This setting created authentication requests that required the IdP to release NameID with a transient format. The default value has been removed, which means that Elasticsearch will create SAML Authentication Requests by default that don’t put this requirement on the IdP. If you want to retain the previous behavior, set nameid_format to urn:oasis:names:tc:SAML:2.0:nameid-format:transient .",
            "impact": "If you currently don’t configure nameid_format explicitly, it’s possible that your IdP will reject authentication requests from Elasticsearch because the requests do not specify a NameID format (and your IdP is configured to expect one). This mismatch can result in a broken SAML configuration. If you’re unsure whether your IdP is explicitly configured to use a certain NameID format and you want to retain current behavior , try setting nameid_format to urn:oasis:names:tc:SAML:2.0:nameid-format:transient explicitly."
          },
          {
            "change": "The xpack.security.transport.ssl.enabled setting is now required to configure xpack.security.transport.ssl settings.",
            "details": "It is now an error to configure any SSL settings for xpack.security.transport.ssl without also configuring xpack.security.transport.ssl.enabled .",
            "impact": "If using other xpack.security.transport.ssl settings, you must explicitly specify the xpack.security.transport.ssl.enabled setting. If you do not want to enable SSL and are currently using other xpack.security.transport.ssl settings, do one of the following: Explicitly specify xpack.security.transport.ssl.enabled as false Discontinue use of other xpack.security.transport.ssl settings If you want to enable SSL, follow the instructions in Encrypting communications between nodes in a cluster . As part of this configuration, explicitly specify xpack.security.transport.ssl.enabled as true . For example, the following configuration is invalid: xpack.security.transport.ssl.keystore.path: elastic-certificates.p12 xpack.security.transport.ssl.truststore.path: elastic-certificates.p12 And must be configured as: xpack.security.transport.ssl.enabled: true xpack.security.transport.ssl.keystore.path: elastic-certificates.p12 xpack.security.transport.ssl.truststore.path: elastic-certificates.p12 or false ."
          },
          {
            "change": "The xpack.security.http.ssl.enabled setting is now required to configure xpack.security.http.ssl settings.",
            "details": "It is now an error to configure any SSL settings for xpack.security.http.ssl without also configuring xpack.security.http.ssl.enabled .",
            "impact": "If using other xpack.security.http.ssl settings, you must explicitly specify the xpack.security.http.ssl.enabled setting. If you do not want to enable SSL and are currently using other xpack.security.http.ssl settings, do one of the following: Explicitly specify xpack.security.http.ssl.enabled as false Discontinue use of other xpack.security.http.ssl settings If you want to enable SSL, follow the instructions in Encrypting HTTP client communications . As part of this configuration, explicitly specify xpack.security.http.ssl.enabled as true . For example, the following configuration is invalid: xpack.security.http.ssl.certificate: elasticsearch.crt xpack.security.http.ssl.key: elasticsearch.key xpack.security.http.ssl.certificate_authorities: [ \"corporate-ca.crt\" ] And must be configured as either: xpack.security.http.ssl.enabled: true xpack.security.http.ssl.certificate: elasticsearch.crt xpack.security.http.ssl.key: elasticsearch.key xpack.security.http.ssl.certificate_authorities: [ \"corporate-ca.crt\" ] or false ."
          },
          {
            "change": "A xpack.security.transport.ssl certificate and key are now required to enable SSL for the transport interface.",
            "details": "It is now an error to enable SSL for the transport interface without also configuring a certificate and key through use of the xpack.security.transport.ssl.keystore.path setting or the xpack.security.transport.ssl.certificate and xpack.security.transport.ssl.key settings.",
            "impact": "If xpack.security.transport.ssl.enabled is set to true , provide a certificate and key using the xpack.security.transport.ssl.keystore.path setting or the xpack.security.transport.ssl.certificate and xpack.security.transport.ssl.key settings. If a certificate and key is not provided, Elasticsearch will return in an error on startup."
          },
          {
            "change": "A xpack.security.http.ssl certificate and key are now required to enable SSL for the HTTP server.",
            "details": "It is now an error to enable SSL for the HTTP (Rest) server without also configuring a certificate and key through use of the xpack.security.http.ssl.keystore.path setting or the xpack.security.http.ssl.certificate and xpack.security.http.ssl.key settings.",
            "impact": "If xpack.security.http.ssl.enabled is set to true , provide a certificate and key using the xpack.security.http.ssl.keystore.path setting or the xpack.security.http.ssl.certificate and xpack.security.http.ssl.key settings. If certificate and key is not provided, Elasticsearch will return in an error on startup."
          },
          {
            "change": "PKCS#11 keystores and trustores cannot be configured in elasticsearch.yml",
            "details": "The settings *.ssl.keystore.type and *.ssl.truststore.type no longer accept \"PKCS11\" as a valid type. This applies to all SSL settings in Elasticsearch, including xpack.security.http.keystore.type xpack.security.transport.keystore.type xpack.security.http.truststore.type xpack.security.transport.truststore.type As well as SSL settings for security realms, watcher and monitoring. Use of a PKCS#11 keystore or truststore as the JRE’s default store is not affected.",
            "impact": "If you have a PKCS#11 keystore configured within your elasticsearch.yml file, you must remove that configuration and switch to a supported keystore type, or configure your PKCS#11 keystore as the JRE default store."
          },
          {
            "change": "The kibana user has been replaced by kibana_system .",
            "details": "The kibana user was historically used to authenticate Kibana to Elasticsearch. The name of this user was confusing, and was often mistakenly used to login to Kibana. This has been renamed to kibana_system in order to reduce confusion, and to better align with other built-in system accounts.",
            "impact": "Replace any use of the kibana user with the kibana_system user. Specifying the kibana user in kibana.yml will result in an error on startup. If your kibana.yml used to contain: elasticsearch.username: kibana then you should update to use the new kibana_system user instead: elasticsearch.username: kibana_system The new kibana_system user does not preserve the previous kibana user password. You must explicitly set a password for the kibana_system user."
          },
          {
            "change": "The search.remote.* settings have been removed.",
            "details": "In 6.5 these settings were deprecated in favor of cluster.remote . In 7.x we provided automatic upgrading of these settings to their cluster.remote counterparts. In 8.0.0, these settings have been removed. Elasticsearch will refuse to start if you have these settings in your configuration or cluster state.",
            "impact": "Use the replacement cluster.remote settings. Discontinue use of the search.remote.* settings. Specifying these settings in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The pidfile setting has been replaced by node.pidfile .",
            "details": "To ensure that all settings are in a proper namespace, the pidfile setting was previously deprecated in version 7.4.0 of Elasticsearch, and is removed in version 8.0.0. Instead, use node.pidfile .",
            "impact": "Use the node.pidfile setting. Discontinue use of the pidfile setting. Specifying the pidfile setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The processors setting has been replaced by node.processors .",
            "details": "To ensure that all settings are in a proper namespace, the processors setting was previously deprecated in version 7.4.0 of Elasticsearch, and is removed in version 8.0.0. Instead, use node.processors .",
            "impact": "Use the node.processors setting. Discontinue use of the processors setting. Specifying the processors setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The node.processors setting can no longer exceed the available number of processors.",
            "details": "Previously it was possible to set the number of processors used to set the default sizes for the thread pools to be more than the number of available processors. As this leads to more context switches and more threads but without an increase in the number of physical CPUs on which to schedule these additional threads, the node.processors setting is now bounded by the number of available processors.",
            "impact": "If specified, ensure the value of node.processors setting does not exceed the number of available processors. Setting the node.processors value greater than the number of available processors in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The cluster.remote.connect setting has been removed.",
            "details": "In Elasticsearch 7.7.0, the setting cluster.remote.connect was deprecated in favor of setting node.remote_cluster_client . In Elasticsearch 8.0.0, the setting cluster.remote.connect is removed.",
            "impact": "Use the node.remote_cluster_client setting. Discontinue use of the cluster.remote.connect setting. Specifying the cluster.remote.connect setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The node.local_storage setting has been removed.",
            "details": "In Elasticsearch 7.8.0, the setting node.local_storage was deprecated and beginning in Elasticsearch 8.0.0 all nodes will require local storage. Therefore, the node.local_storage setting has been removed.",
            "impact": "Discontinue use of the node.local_storage setting. Specifying this setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The auth.password setting for HTTP monitoring has been removed.",
            "details": "In Elasticsearch 7.7.0, the setting xpack.monitoring.exporters.<exporterName>.auth.password was deprecated in favor of setting xpack.monitoring.exporters.<exporterName>.auth.secure_password . In Elasticsearch 8.0.0, the setting xpack.monitoring.exporters.<exporterName>.auth.password is removed.",
            "impact": "Use the xpack.monitoring.exporters.<exporterName>.auth.secure_password setting. Discontinue use of the xpack.monitoring.exporters.<exporterName>.auth.password setting. Specifying the xpack.monitoring.exporters.<exporterName>.auth.password setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "Settings used to disable basic license features have been removed.",
            "details": "The following settings were deprecated in Elasticsearch 7.8.0 and have been removed in Elasticsearch 8.0.0: xpack.enrich.enabled xpack.flattened.enabled xpack.ilm.enabled xpack.monitoring.enabled xpack.rollup.enabled xpack.slm.enabled xpack.sql.enabled xpack.transform.enabled xpack.vectors.enabled These basic license features are now always enabled. If you have disabled ILM so that you can use another tool to manage Watcher indices, the newly introduced xpack.watcher.use_ilm_index_management setting may be set to false.",
            "impact": "Discontinue use of the removed settings. Specifying these settings in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "Settings used to defer cluster recovery pending a certain number of master nodes have been removed.",
            "details": "The following cluster settings have been removed: gateway.expected_nodes gateway.expected_master_nodes gateway.recover_after_nodes gateway.recover_after_master_nodes It is safe to recover the cluster as soon as a majority of master-eligible nodes have joined so there is no benefit in waiting for any additional master-eligible nodes to start.",
            "impact": "Discontinue use of the removed settings. If needed, use gateway.expected_data_nodes or gateway.recover_after_data_nodes to defer cluster recovery pending a certain number of data nodes."
          },
          {
            "change": "Legacy role settings have been removed.",
            "details": "The legacy role settings: node.data node.ingest node.master node.ml node.remote_cluster_client node.transform node.voting_only have been removed. Instead, use the node.roles setting. If you were previously using the legacy role settings on a 7.13 or later cluster, you will have a deprecation log message on each of your nodes indicating the exact replacement value for node.roles .",
            "impact": "Discontinue use of the removed settings. Specifying these settings in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The system call filter setting has been removed.",
            "details": "Elasticsearch uses system call filters to remove its ability to fork another process. This is useful to mitigate remote code exploits. These system call filters are enabled by default, and were previously controlled via the setting bootstrap.system_call_filter . Starting in Elasticsearch 8.0, system call filters will be required. As such, the setting bootstrap.system_call_filter was deprecated in Elasticsearch 7.13.0, and is removed as of Elasticsearch 8.0.0.",
            "impact": "Discontinue use of the removed setting. Specifying this setting in Elasticsearch configuration will result in an error on startup."
          },
          {
            "change": "Tier filtering settings have been removed.",
            "details": "The cluster and index level settings ending in ._tier used for filtering the allocation of a shard to a particular set of nodes have been removed. Instead, the tier preference setting , index.routing.allocation.include._tier_preference should be used. The removed settings are: Cluster level settings: cluster.routing.allocation.include._tier cluster.routing.allocation.exclude._tier cluster.routing.allocation.require._tier Index settings: index.routing.allocation.include._tier index.routing.allocation.exclude._tier index.routing.allocation.require._tier",
            "impact": "Discontinue use of the removed settings. Specifying any of these cluster settings in Elasticsearch configuration will result in an error on startup. Any indices using these settings will have the settings archived (and they will have no effect) when the index metadata is loaded."
          },
          {
            "change": "Shared data path and per index data path settings are deprecated.",
            "details": "Elasticsearch uses the shared data path as the base path of per index data paths. This feature was previously used with shared replicas. Starting in 7.13.0, these settings are deprecated. Starting in 8.0 only existing indices created in 7.x will be capable of using the shared data path and per index data path settings.",
            "impact": "Discontinue use of the deprecated settings."
          },
          {
            "change": "The single data node watermark setting is deprecated and now only accepts true .",
            "details": "In 7.14, setting cluster.routing.allocation.disk.watermark.enable_for_single_data_node to false was deprecated. Starting in 8.0, the only legal value will be true. In a future release, the setting will be removed completely, with same behavior as if the setting was true . If the old behavior is desired for a single data node cluster, disk based allocation can be disabled by setting cluster.routing.allocation.disk.threshold_enabled: false",
            "impact": "Discontinue use of the deprecated setting."
          },
          {
            "change": "The gateway.auto_import_dangling_indices setting has been removed.",
            "details": "The gateway.auto_import_dangling_indices cluster setting has been removed. Previously, you could use this setting to automatically import dangling indices . However, automatically importing dangling indices is unsafe. Use the dangling indices APIs to manage and import dangling indices instead.",
            "impact": "Discontinue use of the removed setting. Specifying the setting in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The listener thread pool has been removed.",
            "details": "Previously, the transport client used the thread pool to ensure listeners aren’t called back on network threads. The transport client has been removed in 8.0, and the thread pool is no longer needed.",
            "impact": "Remove listener thread pool settings from elasticsearch.yml for any nodes. Specifying listener thread pool settings in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "The fixed_auto_queue_size thread pool type has been removed.",
            "details": "The fixed_auto_queue_size thread pool type, previously marked as an experimental feature, was deprecated in 7.x and has been removed in 8.0. The search and search_throttled thread pools have the fixed type now.",
            "impact": "No action needed."
          },
          {
            "change": "Several transport settings have been replaced.",
            "details": "The following settings have been deprecated in 7.x and removed in 8.0. Each setting has a replacement setting that was introduced in 6.7. transport.tcp.port replaced by transport.port transport.tcp.compress replaced by transport.compress transport.tcp.connect_timeout replaced by transport.connect_timeout transport.tcp_no_delay replaced by transport.tcp.no_delay transport.profiles.profile_name.tcp_no_delay replaced by transport.profiles.profile_name.tcp.no_delay transport.profiles.profile_name.tcp_keep_alive replaced by transport.profiles.profile_name.tcp.keep_alive transport.profiles.profile_name.reuse_address replaced by transport.profiles.profile_name.tcp.reuse_address transport.profiles.profile_name.send_buffer_size replaced by transport.profiles.profile_name.tcp.send_buffer_size transport.profiles.profile_name.receive_buffer_size replaced by transport.profiles.profile_name.tcp.receive_buffer_size",
            "impact": "Use the replacement settings. Discontinue use of the removed settings. Specifying the removed settings in elasticsearch.yml will result in an error on startup."
          },
          {
            "change": "Selective transport compression has been enabled by default.",
            "details": "Prior to 8.0, transport compression was disabled by default. Starting in 8.0, transport.compress defaults to indexing_data . This configuration means that the propagation of raw indexing data will be compressed between nodes.",
            "impact": "Inter-node transit will get reduced along the indexing path. In some scenarios, CPU usage could increase."
          },
          {
            "change": "Transport compression defaults to lz4.",
            "details": "Prior to 8.0, the transport.compression_scheme setting defaulted to deflate . Starting in 8.0, transport.compress_scheme defaults to lz4 . Prior to 8.0, the cluster.remote.<cluster_alias>.transport.compression_scheme setting defaulted to deflate when cluster.remote.<cluster_alias>.transport.compress was explicitly configured. Starting in 8.0, cluster.remote.<cluster_alias>.transport.compression_scheme will fallback to transport.compression_scheme by default.",
            "impact": "This configuration means that transport compression will produce somewhat lower compression ratios in exchange for lower CPU load."
          },
          {
            "change": "The repositories.fs.compress node-level setting has been removed.",
            "details": "For shared file system repositories ( \"type\": \"fs\" ), the node level setting repositories.fs.compress could previously be used to enable compression for all shared file system repositories where compress was not specified. The repositories.fs.compress setting has been removed.",
            "impact": "Discontinue use of the repositories.fs.compress node-level setting. Use the repository-specific compress setting to enable compression instead. Refer to Shared file system repository settings ."
          },
          {
            "change": "When FIPS mode is enabled the default password hash is now PBKDF2_STRETCH",
            "details": "If xpack.security.fips_mode.enabled is true (see FIPS 140-2 ), the value of xpack.security.authc.password_hashing.algorithm now defaults to pbkdf2_stretch . In earlier versions this setting would always default to bcrypt and a runtime check would prevent a node from starting unless the value was explicitly set to a \"pbkdf2\" variant. There is no change for clusters that do not enable FIPS 140 mode.",
            "impact": "This change should not have any impact on upgraded nodes. Any node with an explicitly configured value for the password hashing algorithm will continue to use that configured value. Any node that did not have an explicitly configured password hashing algorithm in Elasticsearch 6.x or Elasticsearch 7.x would have failed to start."
          },
          {
            "change": "The xpack.monitoring.history.duration will not delete indices created by metricbeat or elastic agent",
            "details": "Prior to 8.0, Elasticsearch would internally handle removal of all monitoring indices according to the xpack.monitoring.history.duration setting. When using metricbeat or elastic agent >= 8.0 to collect monitoring data, indices are managed via an ILM policy. If the setting is present, the policy will be created using the xpack.monitoring.history.duration as an initial retention period. If you need to customize retention settings for monitoring data collected with metricbeat, please update the .monitoring-8-ilm-policy ILM policy directly. The xpack.monitoring.history.duration setting will only apply to monitoring indices written using (legacy) internal collection, not indices created by metricbeat or agent.",
            "impact": "After upgrading, insure that the .monitoring-8-ilm-policy ILM policy aligns with your desired retention settings. If you only use metricbeat or agent to collect monitoring data, you can also remove any custom xpack.monitoring.history.duration settings."
          }
        ]
      },
      {
        "category": "Command line tool changes",
        "changes": [
          {
            "change": "The elasticsearch-migrate tool has been removed.",
            "details": "The elasticsearch-migrate tool provided a way to convert file realm users and roles into the native realm. It has been deprecated since Elasticsearch 7.2.0. Users and roles should now be created in the native realm directly.",
            "impact": "Discontinue use of the elasticsearch-migrate tool. Attempts to use the elasticsearch-migrate tool will result in an error."
          }
        ]
      },
      {
        "category": "Index setting changes",
        "changes": [
          {
            "change": "Direct access to system indices is deprecated.",
            "details": "Directly accessing system indices is deprecated, and may be prevented in a future version. If you must access a system index, create a security role with an index permission that targets the specific index and set the allow_restricted_indices permission to true . Refer to indices privileges for information on adding this permission to an index privilege.",
            "impact": "Accessing system indices directly results in warnings in the header of API responses. If available, use Kibana or the associated feature’s Elasticsearch APIs to manage the data that you want to access."
          },
          {
            "change": "index.merge.policy.max_merge_at_once_explicit is deprecated and has no effect.",
            "details": "The index.merge.policy.max_merge_at_once_explicit index setting is deprecated and has no effect. Previously, you could specify index.merge.policy.max_merge_at_once_explicit to set the maximum number of segments to merge at the same time during a force merge or when expunging deleted documents. In 8.0, this number is unlimited, regardless of the setting. Specifying index.merge.policy.max_merge_at_once_explicit will have no effect but will generate deprecation warnings.",
            "impact": "To avoid these deprecation warnings, discontinue use of the setting. Don’t specify the setting when creating new indices, and remove the setting from index and component templates. To remove the setting from an existing data stream or index, specify the setting’s value as null using the update index settings API."
          },
          {
            "change": "The index.max_adjacency_matrix_filters index setting has been removed.",
            "details": "The index.max_adjacency_matrix_filters index setting has been removed. Previously, you could use this setting to configure the maximum number of filters for the adjacency matrix aggregation . The indices.query.bool.max_clause_count index setting now determines the maximum number of filters for the aggregation.",
            "impact": "Discontinue use of the index.max_adjacency_matrix_filters index setting. Requests that include the index setting will return an error. If you upgrade a cluster with a 7.x index that already contains the setting, Elasticsearch will archive the setting . Remove the index setting from index and component templates. Attempts to use a template that contains the setting will fail and return an error. This includes automated operations, such the ILM rollover action."
          },
          {
            "change": "The index.force_memory_term_dictionary setting has been removed.",
            "details": "The index.force_memory_term_dictionary setting was introduced in 7.0 as a temporary measure to allow users to opt-out of the optimization that leaves the term dictionary on disk when appropriate. This optimization is now mandatory and the setting is removed.",
            "impact": "Discontinue use of the index.force_memory_term_dictionary index setting. Requests that include this setting will return an error."
          },
          {
            "change": "The index.soft_deletes.enabled setting has been removed.",
            "details": "Creating indices with soft deletes disabled was deprecated in 7.6 and is no longer supported in 8.0. The index.soft_deletes.enabled setting can no longer be set to false .",
            "impact": "Discontinue use of the index.soft_deletes.enabled index setting. Requests that set index.soft_deletes.enabled to false will return an error."
          },
          {
            "change": "The index.translog.retention.age and index.translog.retention.size settings have been removed.",
            "details": "Translog retention settings index.translog.retention.age and index.translog.retention.size were effectively ignored in 7.4, deprecated in 7.7, and removed in 8.0 in favor of soft deletes .",
            "impact": "Discontinue use of the index.translog.retention.age and index.translog.retention.size index settings. Requests that include these settings will return an error."
          }
        ]
      },
      {
        "category": "Java API changes",
        "changes": [
          {
            "change": "The indexlifecycle package has been renamed ilm in the Java High Level REST Client.",
            "details": "In the high level REST client, the indexlifecycle package has been renamed to ilm to match the package rename inside the Elasticsearch code.",
            "impact": "Update your workflow and applications to use the ilm package in place of indexlifecycle ."
          },
          {
            "change": "Changes to Fuzziness .",
            "details": "To create Fuzziness instances, use the fromString and fromEdits method instead of the build method that used to accept both Strings and numeric values. Several fuzziness setters on query builders (e.g. MatchQueryBuilder#fuzziness) now accept only a Fuzziness instance instead of an Object. Fuzziness used to be lenient when it comes to parsing arbitrary numeric values while silently truncating them to one of the three allowed edit distances 0, 1 or 2. This leniency is now removed and the class will throw errors when trying to construct an instance with another value (e.g. floats like 1.3 used to get accepted but truncated to 1).",
            "impact": "Use the available constants (e.g. Fuzziness.ONE , Fuzziness.AUTO ) or build your own instance using the above mentioned factory methods. Use only allowed Fuzziness values."
          },
          {
            "change": "Changes to Repository .",
            "details": "Repository has no dependency on IndexShard anymore. The contract of restoreShard and snapshotShard has been reduced to Store and MappingService in order to improve testability.",
            "impact": "No action needed."
          }
        ]
      },
      {
        "category": "JVM option changes",
        "changes": [
          {
            "change": "es.disk.auto_release_flood_stage_block has been removed.",
            "details": "If a node exceeds the flood-stage disk watermark then we add a block to all of its indices to prevent further writes as a last-ditch attempt to prevent the node completely exhausting its disk space. By default, from 7.4 onwards the block is automatically removed when a node drops below the high watermark again, but this behaviour could be disabled by setting the system property es.disk.auto_release_flood_stage_block to false . This behaviour is no longer optional, and this system property must now not be set.",
            "impact": "Discontinue use of the es.disk.auto_release_flood_stage_block system property. Setting this system property will result in an error on startup."
          },
          {
            "change": "es.rest.url_plus_as_space has been removed.",
            "details": "Starting in version 7.4, a + in a URL will be encoded as %2B by all REST API functionality. Prior versions handled a + as a single space. In these previous versions, if your application required handling + as a single space, you could return to the old behaviour by setting the system property es.rest.url_plus_as_space to true . Note that this behaviour is deprecated and setting this system property to true will cease to be supported in version 8.",
            "impact": "Update your application or workflow to assume + in a URL is encoded as %2B ."
          },
          {
            "change": "es.unsafely_permit_handshake_from_incompatible_builds has been removed.",
            "details": "Elasticsearch has a check that verifies that communicating pairs of nodes of the same version are running exactly the same build and therefore using the same wire format as each other. In previous versions this check can be bypassed by setting the system property es.unsafely_permit_handshake_from_incompatible_builds to true . The use of this system property is now forbidden.",
            "impact": "Discontinue use of the es.unsafely_permit_handshake_from_incompatible_builds system property, and ensure that all nodes of the same version are running exactly the same build. Setting this system property will result in an error on startup."
          }
        ]
      },
      {
        "category": "Logging changes",
        "changes": [
          {
            "change": "Elasticsearch JSON logs now comply with ECS.",
            "details": "Elasticsearch’s JSON logs now comply with the Elastic Common Schema (ECS) . Previously, Elasticsearch’s JSON logs used a custom schema.",
            "impact": "If your application parses Elasticsearch’s JSON logs, update it to support the new ECS format."
          },
          {
            "change": "Elasticsearch no longer emits deprecation logs or slow logs in plaintext.",
            "details": "Elasticsearch no longer emits a plaintext version of the following logs: Deprecation logs Indexing slow logs Search slow logs These logs are now only available in JSON. Server logs are still available in both a JSON and plaintext format.",
            "impact": "If your application parses Elasticsearch’s plaintext logs, update it to use the new ECS JSON logs."
          },
          {
            "change": "Audit logs are rolled-over and archived by size.",
            "details": "In addition to the existing daily rollover, the security audit logs are now rolled-over by disk size limit as well. Moreover, the rolled-over logs are also gzip compressed.",
            "impact": "The names of rolled over audit log files (but not the name of the current log) have changed. If you’ve set up automated tools to consume these files, you must configure them to use the new names and to possibly account for gzip archives instead of plain text. The Docker build of Elasticsearch is not affected because it logs on stdout , where rollover is not performed."
          }
        ]
      },
      {
        "category": "Mapping changes",
        "changes": [
          {
            "change": "Indices created in Elasticsearch 6.x and earlier versions are not supported.",
            "details": "Elasticsearch 8.0 can read indices created in version 7.0 or above. An Elasticsearch 8.0 node will not start in the presence of indices created in a version of Elasticsearch before 7.0.",
            "impact": "Reindex indices created in Elasticsearch 6.x or before with Elasticsearch 7.x if they need to be carried forward to Elasticsearch 8.x."
          },
          {
            "change": "Closed indices created in Elasticsearch 6.x and earlier versions are not supported.",
            "details": "In earlier versions a node would start up even if it had data from indices created in a version before the previous major version, as long as those indices were closed. Elasticsearch now ensures that it is compatible with every index, open or closed, at startup time.",
            "impact": "Reindex closed indices created in Elasticsearch 6.x or before with Elasticsearch 7.x if they need to be carried forward to Elasticsearch 8.x."
          },
          {
            "change": "The maximum number of completion contexts per field is now 10.",
            "details": "The number of completion contexts within a single completion field has been limited to 10.",
            "impact": "Use a maximum of 10 completion contexts in a completion field. Specifying more than 10 completion contexts will return an error."
          },
          {
            "change": "Multi-fields within multi-fields is no longer supported.",
            "details": "Previously, it was possible to define a multi-field within a multi-field. Defining chained multi-fields was deprecated in 7.3 and is now no longer supported.",
            "impact": "To migrate mappings, all instances of fields that occur within a fields block should be removed, either by flattening the chained fields blocks into a single level, or by switching to copy_to if appropriate."
          },
          {
            "change": "The _field_names metadata field’s enabled parameter has been removed.",
            "details": "The setting has been deprecated with 7.5 and is no longer supported on new indices. Mappings for older indices will continue to work but emit a deprecation warning.",
            "impact": "The enabled setting for _field_names should be removed from templates and mappings. Disabling _field_names is not necessary because it no longer carries a large index overhead."
          },
          {
            "change": "The boost parameter on field mappings has been removed.",
            "details": "Index-time boosts have been deprecated since the 5x line, but it was still possible to declare field-specific boosts in the mappings. This is now removed completely. Indexes built in 7x that contain mapping boosts will emit warnings, and the boosts will have no effect in 8.0. New indexes will not permit boosts to be set in their mappings at all.",
            "impact": "The boost setting should be removed from templates and mappings. Use boosts directly on queries instead."
          },
          {
            "change": "Java-time date formats replace joda-time formats.",
            "details": "In 7.0, Elasticsearch switched from joda time to java time for date-related parsing, formatting, and calculations. Indices created in 7.0 and later versions are already required to use mappings with java-time date formats. However, earlier indices using joda-time formats must be reindexed to use mappings with java-time formats.",
            "impact": "For a detailed migration guide, see the Java time migration guide ."
          },
          {
            "change": "Several geo_shape mapping parameters have been removed.",
            "details": "The following geo_shape mapping parameters were deprecated in 6.6: tree tree_levels strategy distance_error_pct These parameters have been removed in 8.0.0.",
            "impact": "In 8.0, you can no longer create mappings that include these parameters. However, 7.x indices that use these mapping parameters will continue to work."
          },
          {
            "change": "The sparse_vector field data type has been removed.",
            "details": "The sparse_vector field type was deprecated in 7.6 and is now removed in 8.0. We have not seen much interest in this experimental field type, and don’t see a clear use case as it’s currently designed. If you have feedback or suggestions around sparse vector functionality, please let us know through GitHub or the discuss forums.",
            "impact": "Discontinue use of the sparse_vector field data type. Requests containing a mapping for this field data type will return an error."
          }
        ]
      },
      {
        "category": "Packaging changes",
        "changes": [
          {
            "change": "The layout of the data folder has changed.",
            "details": "Each node’s data is now stored directly in the data directory set by the path.data setting, rather than in ${path.data}/nodes/0 , because the removal of the node.max_local_storage_nodes setting means that nodes may no longer share a data path.",
            "impact": "At startup, Elasticsearch will automatically migrate the data path to the new layout. This automatic migration will not proceed if the data path contains data for more than one node. You should move to a configuration in which each node has its own data path before upgrading. If you try to upgrade a configuration in which there is data for more than one node in a data path then the automatic migration will fail and Elasticsearch will refuse to start. To resolve this you will need to perform the migration manually. The data for the extra nodes are stored in folders named ${path.data}/nodes/1 , ${path.data}/nodes/2 and so on, and you should move each of these folders to an appropriate location and then configure the corresponding node to use this location for its data path. If your nodes each have more than one data path in their path.data settings then you should move all the corresponding subfolders in parallel. Each node uses the same subfolder (e.g. nodes/2 ) across all its data paths."
          },
          {
            "change": "The default Maxmind geoip databases have been removed.",
            "details": "The default Maxmind geoip databases that shipped by default with Elasticsearch have been removed. These databases are out dated and stale and using these databases will likely result in incorrect geoip lookups. By default since 7.13, these pre-packaged geoip databases were used in case no database were specified in the config directory or before the geoip downloader downloaded the geoip databases. When the geoip database downloader completed downloading the new databases then these pre-packaged databases were no longer used.",
            "impact": "If the geoip downloader is disabled and no geoip databases are provided in the config directory of each ingest node then the geoip processor will no longer perform geoip lookups and tag these documents with the fact that the requested database is no longer available. After a cluster has been started and before the geoip downloader has completed downloading the most up to data databases, the geoip processor will not perform any geoip lookups and tag documents that the requested database is not available. The window of time that the geoip processor can’t do geoip lookups after cluster startup should be very small."
          }
        ]
      },
      {
        "category": "Painless changes",
        "changes": [
          {
            "change": "The JodaCompatibleZonedDateTime class has been removed.",
            "details": "As a transition from Joda datetime to Java datetime, scripting used an intermediate class called JodaCompatibleZonedDateTime . This class has been removed and is replaced by ZonedDateTime . Any use of casting to a JodaCompatibleZonedDateTime or use of method calls only available in JodaCompatibleZonedDateTime in a script will result in a compilation error, and may not allow the upgraded node to start.",
            "impact": "Before upgrading, replace getDayOfWeek with getDayOfWeekEnum().value in any scripts. Any use of getDayOfWeek expecting a return value of int will result in a compilation error or runtime error and may not allow the upgraded node to start. The following JodaCompatibleZonedDateTime methods must be replaced using ZonedDateTime methods prior to upgrade: getMillis() → toInstant().toEpochMilli() getCenturyOfEra() → get(ChronoField.YEAR_OF_ERA) / 100 getEra() → get(ChronoField.ERA) getHourOfDay() → getHour() getMillisOfDay() → get(ChronoField.MILLI_OF_DAY) getMillisOfSecond() → get(ChronoField.MILLI_OF_SECOND) getMinuteOfDay() → get(ChronoField.MINUTE_OF_DAY) getMinuteOfHour() → getMinute() getMonthOfYear() → getMonthValue() getSecondOfDay() → get(ChronoField.SECOND_OF_DAY) getSecondOfMinute() → getSecond() getWeekOfWeekyear() → get(IsoFields.WEEK_OF_WEEK_BASED_YEAR) getWeekyear() → get(IsoFields.WEEK_BASED_YEAR) getYearOfCentury() → get(ChronoField.YEAR_OF_ERA) % 100 getYearOfEra() → get(ChronoField.YEAR_OF_ERA) toString(String) → a DateTimeFormatter toString(String, Locale) → a DateTimeFormatter"
          }
        ]
      },
      {
        "category": "Plugin changes",
        "changes": [
          {
            "change": "The S3, GCS and Azure repository plugins are now included in Elasticsearch",
            "details": "In previous versions of Elasticsearch, in order to register a snapshot repository backed by Amazon S3, Google Cloud Storage (GCS) or Microsoft Azure Blob Storage, you first had to install the corresponding Elasticsearch plugin, for example repository-s3 . These plugins are now included in Elasticsearch by default.",
            "impact": "You no longer need to install the following plugins, and not should attempt to do so. repository-azure repository-gcs repository-s3 Elasticsearch and the elasticsearch-plugin CLI tool have been changed to tolerate attempted installation and removal of these plugins in order to avoid breaking any existing automation. In the future, attempting to install these plugins will be an error. Specifically, the elasticsearch-plugin CLI tool will not fail if you attempt to install any of the above plugins, and will instead print a warning and skip the plugins. If any of these plugins are already installed, for example because you installed them when running an older version of Elasticsearch, then you can still remove them with elasticsearch-plugin . Attempting to remove them if they are not installed will succeed but print a warnings. If you run Elasticsearch using Docker and you are managing plugins using a configuration file , then when Elasticsearch first starts after you upgrade it, it will remove the above plugins if they already installed. If any of these plugins are specified in your configuration file, Elasticsearch will ignore them and emit a warning log message."
          },
          {
            "change": "Third party plugins can no longer intercept REST requests ( RestHandlerWrapper )",
            "details": "In previous versions of Elasticsearch, third-party plugins could implement the getRestHandlerWrapper method to intercept all REST requests to the node. A common use of this feature was to implement custom security plugins to replace the built-in security features. This extension point is no longer available to third-party plugins.",
            "impact": "Some third-party plugins that were designed to work with earlier versions of Elasticsearch might not be compatible with Elasticsearch version 8.0 or later. If you depend on any plugins that are not produced and supported by Elastic, check with the plugin author and ensure that the plugin is available for your target version of Elasticsearch before upgrading."
          }
        ]
      },
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "REST API endpoints containing _xpack have been removed.",
            "details": "In 7.0, we deprecated REST endpoints that contain _xpack in their path. These endpoints are now removed in 8.0. Each endpoint that was deprecated and removed is replaced with a new endpoint that does not contain _xpack . As an example, /{index}/_xpack/graph/_explore is replaced by /{index}/_graph/explore .",
            "impact": "Use the replacement REST API endpoints. Requests submitted to the _xpack API endpoints will return an error."
          },
          {
            "change": "REST API endpoints containing mapping types have been removed.",
            "details": "Mapping types have been removed. API endpoints that contain a mapping type have also been removed. Use a typeless endpoint instead. API Typed API endpoint Typeless API endpoint Bulk <target>/<type>/_bulk <target>/_bulk Count <target>/<type>/_count <target>/_count Delete <index>/<type>/<_id> <index>/_doc/<_id> Delete by query <target>/<type>/_delete_by_query <target>/_delete_by_query Explain <index>/<type>/<_id>/_explain <index>/_explain/<_id> Get <index>/<type>/<_id> <index>/_doc/<_id> <index>/<type>/<_id>/_source <index>/_source/<_id> Get field mapping _mapping/<type>/field/<field> _mapping/field/<field> <target>/_mapping/<type>/field/<field> <target>/_mapping/field/<field> Get mapping _mapping/<type> _mapping or <target>/_mapping <target>/<type>/_mapping <target>/_mapping <target>/_mapping/<type> <target>/_mapping Graph explore <index>/<type>/_graph/explore <index>/_graph/explore Index <target>/<type>/<_id>/_create <target>/_create/<_id> <target>/<type> <target>/_doc <target>/<type>/<_id> <target>/_doc/<_id> Multi get <index>/<type>/_mget <index>/_mget Multi search <target>/<type>/_msearch <target>/_msearch Multi search template <target>/<type>/_msearch/template <target>/_msearch/template Multi term vectors <index>/<type>/_mtermvectors <index>/_mtermvectors Rollup search <target>/<type>/_rollup_search <target>/_rollup_search Search <target>/<type>/_search <target>/_search Search template <target>/<type>/_search/template <target>/_search/template Term vectors <index>/<mapping_type>/<_id>/_termvectors <index>/_termvectors<_id> <index>/<mapping_type>/_termvectors <index>/_termvectors Update <index>/<type>/<_id>/_update <index>/_update/<_id> Update by query <target>/<type>/_update_by_query <target>/_update_by_query Update mapping <target>/<type>/_mapping <target>/_mapping <target>/_mapping/<type> <target>/_mapping _mapping/<type> <target>/_mapping Validate <target>/<type>/_validate/query <target>/_validate/query",
            "impact": "Update your application to use typeless REST API endpoints. Requests to endpoints that contain a mapping type will return an error."
          },
          {
            "change": "Cross-cluster search (CCS) is now only backward-compatible with the previous minor version.",
            "details": "In 8.0+, Elastic supports searches from a local cluster to a remote cluster running: The previous minor version. The same version. A newer minor version in the same major version. Elastic also supports searches from a local cluster running the last minor version of a major version to a remote cluster running any minor version in the following major version. For example, a local 7.17 cluster can search any remote 8.x cluster. For the EQL search API , the local and remote clusters must use the same Elasticsearch version if they have versions prior to 7.17.7 (included) or prior to 8.5.1 (included). For example, a local 8.0 cluster can search a remote 7.17 or any remote 8.x cluster. However, a search from a local 8.0 cluster to a remote 7.16 or 6.8 cluster is not supported. Previously, we also supported searches on remote clusters running: Any minor version of the local cluster’s major version. The last minor release of the previous major version. However, such searches can result in undefined behavior.",
            "impact": "If you only run cross-cluster searches on remote clusters using the same or a newer version, no changes are needed. If you previously searched remote clusters running an earlier version of Elasticsearch, see Ensure cross-cluster search support for recommended solutions. A cross-cluster search using an unsupported configuration may still work. However, such searches aren’t tested by Elastic, and their behavior isn’t guaranteed."
          },
          {
            "change": "The terms aggregation no longer supports the _term order key.",
            "details": "The terms aggregation no longer supports the _term key in order values. To sort buckets by their term, use _key instead.",
            "impact": "Discontinue use of the _term order key. Requests that include a _term order key will return an error."
          },
          {
            "change": "The date_histogram aggregation no longer supports the _time order key.",
            "details": "The date_histogram aggregation no longer supports the _time key in order values. To sort buckets by their key, use _key instead.",
            "impact": "Discontinue use of the _time order key. Requests that include a _time order key will return an error."
          },
          {
            "change": "The moving_avg aggregation has been removed.",
            "details": "The moving_avg aggregation was deprecated in 6.4 and has been removed. To calculate moving averages, use the moving_fn aggregation instead.",
            "impact": "Discontinue use of the moving_avg aggregation. Requests that include the moving_avg aggregation will return an error."
          },
          {
            "change": "The percentiles aggregation’s percents parameter no longer supports duplicate values.",
            "details": "If you specify the percents parameter with the percentiles aggregation , its values must be unique. Otherwise, an exception occurs.",
            "impact": "Use unique values in the percents parameter of the percentiles aggregation. Requests containing duplicate values in the percents parameter will return an error."
          },
          {
            "change": "The date_histogram aggregation’s interval parameter is no longer valid.",
            "details": "It is now an error to specify the interval parameter to the date_histogram aggregation or the composite date_histogram source. Instead, please use either calendar_interval or fixed_interval as appropriate.",
            "impact": "Uses of the interval parameter in either the date_histogram aggregation or the date_histogram composite source will now generate an error. Instead please use the more specific fixed_interval or calendar_interval parameters."
          },
          {
            "change": "The nGram and edgeNGram token filter names have been removed.",
            "details": "The nGram and edgeNGram token filter names that have been deprecated since version 6.4 have been removed. Both token filters can only be used by their alternative names ngram and edge_ngram since version 7.0.",
            "impact": "Use the equivalent ngram and edge_ngram token filters. Requests containing the nGram and edgeNGram token filter names will return an error."
          },
          {
            "change": "The nGram and edgeNGram tokenizer names have been removed.",
            "details": "The nGram and edgeNGram tokenizer names haven been deprecated with 7.6 and are no longer supported on new indices. Mappings for indices created after 7.6 will continue to work but emit a deprecation warning. The tokenizer name should be changed to the fully equivalent ngram or edge_ngram names for new indices and in index templates.",
            "impact": "Use the ngram and edge_ngram tokenizers. Requests to create new indices using the nGram and edgeNGram tokenizer names will return an error."
          },
          {
            "change": "The in_flight_requests stat has been renamed inflight_requests in logs and diagnostic APIs.",
            "details": "The name of the in flight requests circuit breaker in log output and diagnostic APIs (such as the node stats API) changes from in_flight_requests to inflight_requests to align it with the name of the corresponding settings.",
            "impact": "Update your workflow and applications to use the inflight_requests stat in place of in_flight_requests ."
          },
          {
            "change": "The voting configuration exclusions API endpoint has changed.",
            "details": "The POST /_cluster/voting_config_exclusions/{node_filter} API has been removed in favour of POST /_cluster/voting_config_exclusions?node_names=... and POST /_cluster/voting_config_exclusions?node_ids=... which allow you to specify the names or IDs of the nodes to exclude.",
            "impact": "Use POST /_cluster/voting_config_exclusions?node_ids=... and specify the nodes to exclude instead of using a node filter. Requests submitted to the /_cluster/voting_config_exclusions/{node_filter} endpoint will return an error."
          },
          {
            "change": "Remote system indices are not followed automatically if they match an auto-follow pattern.",
            "details": "Remote system indices matching an auto-follow pattern won’t be configured as a follower index automatically.",
            "impact": "Explicitly create a follower index to follow a remote system index if that’s the wanted behaviour."
          },
          {
            "change": "The EQL wildcard function has been removed.",
            "details": "The wildcard function was deprecated in Elasticsearch 7.13.0 and has been removed.",
            "impact": "Use the like or regex keywords instead."
          },
          {
            "change": "The ILM freeze action is now a no-op.",
            "details": "The ILM freeze action is now a no-op and performs no action on the index, as the freeze API endpoint has been removed in 8.0.",
            "impact": "Update your ILM policies to remove the freeze action from the cold phase."
          },
          {
            "change": "Additional validation for ILM policies.",
            "details": "Creating or updating an ILM policy now requires that any referenced snapshot repositories and SLM policies exist.",
            "impact": "Update your code or configuration management to ensure that repositories and SLM policies are created before any policies that reference them."
          },
          {
            "change": "The deprecated _upgrade API has been removed.",
            "details": "Previously, the _upgrade API upgraded indices from the previous major version to the current version. The _reindex API should be used instead for that purpose.",
            "impact": "Requests made to the old _upgrade API will return an error."
          },
          {
            "change": "The deprecated freeze index API has been removed.",
            "details": "The freeze index API ( POST /<index>/_freeze ) has been removed. Improvements in heap memory usage have eliminated the reason to freeze indices. You can still unfreeze existing frozen indices using the unfreeze index API . For some use cases, the frozen tier may be a suitable replacement for frozen indices. See data tiers for more information.",
            "impact": "Requests made to the old freeze index API will return an error."
          },
          {
            "change": "The force merge API’s max_num_segments and only_expunge_deletes parameters cannot both be specified in the same request.",
            "details": "Previously, the force merge API allowed the parameters only_expunge_deletes and max_num_segments to be set to a non default value at the same time. But the max_num_segments was silently ignored when only_expunge_deletes is set to true , leaving the false impression that it has been applied.",
            "impact": "When using the force merge API , do not specify values for both the max_num_segments and only_expunge_deletes parameters. Requests that include values for both parameters will return an error."
          },
          {
            "change": "The create or update index template API’s template parameter has been removed.",
            "details": "In 6.0, we deprecated the template parameter in create or update index template requests in favor of using index_patterns . Support for the template parameter is now removed in 8.0.",
            "impact": "Use the create or update index template API 's index_patterns parameter. Requests that include the template parameter will return an error."
          },
          {
            "change": "Synced flush has been removed.",
            "details": "Synced flush was deprecated in 7.6 and is removed in 8.0. Use a regular flush instead as it has the same effect as a synced flush in 7.6 and later.",
            "impact": "Use the flush API . Requests to the /<index>/flush/synced or /flush/synced endpoints will return an error."
          },
          {
            "change": "The default for the ?wait_for_active_shards parameter on the close index API has changed.",
            "details": "When closing an index in earlier versions, by default Elasticsearch would not wait for the shards of the closed index to be properly assigned before returning. From version 8.0 onwards the default behaviour is to wait for shards to be assigned according to the index.write.wait_for_active_shards index setting .",
            "impact": "Accept the new behaviour, or specify ?wait_for_active_shards=0 to preserve the old behaviour if needed."
          },
          {
            "change": "The index stats API’s types query parameter has been removed.",
            "details": "The index stats API’s types query parameter has been removed. Previously, you could combine types with the indexing query parameter to return indexing stats for specific mapping types. Mapping types have been removed in 8.0.",
            "impact": "Discontinue use of the types query parameter. Requests that include the parameter will return an error."
          },
          {
            "change": "The user_agent ingest processor’s ecs parameter has no effect.",
            "details": "In 7.2, we deprecated the ecs parameter for the user_agent ingest processor. In 8.x, the user_agent ingest processor will only return Elastic Common Schema (ECS) fields, regardless of the ecs value.",
            "impact": "To avoid deprecation warnings, remove the parameter from your ingest pipelines. If a pipeline specifies an ecs value, the value is ignored."
          },
          {
            "change": "The include_type_name query parameter has been removed.",
            "details": "The include_type_name query parameter has been removed from the index creation, index template, and mapping APIs. Previously, you could set include_type_name to true to indicate that requests and responses should include a mapping type name. Mapping types have been removed in 8.x.",
            "impact": "Discontinue use of the include_type_name query parameter. Requests that include the parameter will return an error."
          },
          {
            "change": "Reindex from remote now re-encodes URL-encoded index names.",
            "details": "Reindex from remote would previously allow URL-encoded index names and not re-encode them when generating the search request for the remote host. This leniency has been removed such that all index names are correctly encoded when reindex generates remote search requests.",
            "impact": "Specify unencoded index names for reindex from remote requests."
          },
          {
            "change": "In the reindex, delete by query, and update by query APIs, the size parameter has been renamed.",
            "details": "Previously, a _reindex request had two different size specifications in the body: Outer level, determining the maximum number of documents to process Inside the source element, determining the scroll/batch size. The outer level size parameter has now been renamed to max_docs to avoid confusion and clarify its semantics. Similarly, the size parameter has been renamed to max_docs for _delete_by_query and _update_by_query to keep the 3 interfaces consistent.",
            "impact": "Use the replacement parameters. Requests containing the size parameter will return an error."
          },
          {
            "change": "The update by query API now rejects unsupported script fields.",
            "details": "An update by query API request that includes an unsupported field in the script object now returns an error. Previously, the API would silently ignore these unsupported fields.",
            "impact": "To avoid errors, remove unsupported fields from the script object."
          },
          {
            "change": "The cat node API’s local query parameter has been removed.",
            "details": "The ?local parameter to the GET _cat/nodes API was deprecated in 7.x and is rejected in 8.0. This parameter caused the API to use the local cluster state to determine the nodes returned by the API rather than the cluster state from the master, but this API requests information from each selected node regardless of the ?local parameter which means this API does not run in a fully node-local fashion.",
            "impact": "Discontinue use of the ?local query parameter. cat node API requests that include this parameter will return an error."
          },
          {
            "change": "The cat shard API’s local query parameter has been removed.",
            "details": "The ?local parameter to the GET _cat/shards API was deprecated in 7.x and is rejected in 8.0. This parameter caused the API to use the local cluster state to determine the nodes returned by the API rather than the cluster state from the master, but this API requests information from each selected node regardless of the ?local parameter which means this API does not run in a fully node-local fashion.",
            "impact": "Discontinue use of the ?local query parameter. cat shards API requests that include this parameter will return an error."
          },
          {
            "change": "The cat indices API’s local query parameter has been removed.",
            "details": "The ?local parameter to the GET _cat/indices API was deprecated in 7.x and is rejected in 8.0. This parameter caused the API to use the local cluster state to determine the nodes returned by the API rather than the cluster state from the master, but this API requests information from each selected node regardless of the ?local parameter which means this API does not run in a fully node-local fashion.",
            "impact": "Discontinue use of the ?local query parameter. cat indices API requests that include this parameter will return an error."
          },
          {
            "change": "The get field mapping API’s local query parameter has been removed.",
            "details": "The local parameter for get field mapping API was deprecated in 7.8 and is removed in 8.0. This parameter is a no-op and field mappings are always retrieved locally.",
            "impact": "Discontinue use of the local query parameter. get field mapping API requests that include this parameter will return an error."
          },
          {
            "change": "Post data to jobs API is deprecated.",
            "details": "The machine learning post data to jobs API is deprecated starting in 7.11.0 and will be removed in a future major version.",
            "impact": "Use datafeeds instead."
          },
          {
            "change": "The job_id property of the Update datafeeds API has been removed.",
            "details": "The ability to update a job_id in a datafeed was deprecated in 7.3.0. and is removed in 8.0.",
            "impact": "It is not possible to move datafeeds between anomaly detection jobs. Create repository and delete repository API’s return 409 status code when a repository is in use instead of 500 ."
          },
          {
            "change": "Create repository and delete repository API’s return 409 status code when a repository is in use instead of 500 .",
            "details": "The Create or update snapshot repository API and Delete snapshot repository API return 409 status code when the request is attempting to modify an existing repository that’s in use instead of status code 500 .",
            "impact": "Update client code that handles creation and deletion of repositories to reflect this change."
          },
          {
            "change": "The allow_no_datafeeds property has been removed from machine learning APIs.",
            "details": "The allow_no_datafeeds property was deprecated in the cat datafeeds , get datafeeds , get datafeed statistics , and stop datafeeds APIs in 7.10.0.",
            "impact": "Use allow_no_match instead."
          },
          {
            "change": "The allow_no_jobs property has been removed from machine learning APIs.",
            "details": "The allow_no_jobs property was deprecated in the cat anomaly detectors , close anomaly detection jobs , get anomaly detection jobs , get anomaly detection job statistics , and get overall buckets APIs in 7.10.0.",
            "impact": "Use allow_no_match instead."
          },
          {
            "change": "The StartRollupJob endpoint now returns a success status if a job has already started.",
            "details": "Previously, attempting to start an already-started rollup job would result in a 500 InternalServerError: Cannot start task for Rollup Job [job] because state was [STARTED] exception. Now, attempting to start a job that is already started will just return a successful 200 OK: started response.",
            "impact": "Update your workflow and applications to assume that a 200 status in response to attempting to start a rollup job means the job is in an actively started state. The request itself may have started the job, or it was previously running and so the request had no effect."
          },
          {
            "change": "Stored scripts no longer support empty scripts or search templates.",
            "details": "The create or update stored script API 's source parameter cannot be empty.",
            "impact": "Before upgrading, use the delete stored script API to delete any empty stored scripts or search templates. In 8.0, Elasticsearch will drop any empty stored scripts or empty search templates from the cluster state. Requests to create a stored script or search template with an empty source will return an error."
          },
          {
            "change": "The create or update stored script API’s code parameter has been removed.",
            "details": "The create or update stored script API 's code parameter has been removed. Use the source parameter instead.",
            "impact": "Discontinue use of the code parameter. Requests that include the parameter will return an error."
          },
          {
            "change": "Searches on the _type field are no longer supported.",
            "details": "In 8.x, the _type metadata field has been removed. Elasticsearch now handles a search on the _type field as a search on a non-existent field. A search on a non-existent field matches no documents, regardless of the query string. In 7.x, a search for _doc in the _type field would match the same documents as a match_all query.",
            "impact": "Remove queries on the _type field from your search requests and search templates. Searches that include these queries may return no results."
          },
          {
            "change": "The multi search API now parses an empty first line as action metadata in text files.",
            "details": "The multi search API now parses an empty first line as empty action metadata when you provide a text file as the request body, such as when using curl’s --data-binary flag. The API no longer supports text files that contain: An empty first line followed by a line containing only {} . An empty first line followed by another empty line.",
            "impact": "Don’t provide an unsupported text file to the multi search API. Requests that include an unsupported file will return an error."
          },
          {
            "change": "The unmapped_type: string sort option has been removed.",
            "details": "Search requests no longer support the unmapped_type: string sort option. Instead, use unmapped_type: keyword to handle an unmapped field as if it had the keyword field type but ignore its values for sorting.",
            "impact": "Discontinue use of unmapped_type: string . Search requests that include the unmapped_type: string sort option will return shard failures."
          },
          {
            "change": "Aggregating and sorting on _id is disallowed by default.",
            "details": "Previously, it was possible to aggregate and sort on the built-in _id field by loading an expensive data structure called fielddata. This was deprecated in 7.6 and is now disallowed by default in 8.0.",
            "impact": "Aggregating and sorting on _id should be avoided. As an alternative, the _id field’s contents can be duplicated into another field with docvalues enabled (note that this does not apply to auto-generated IDs)."
          },
          {
            "change": "The common query has been removed.",
            "details": "The common query, deprecated in 7.x, has been removed in 8.0. The same functionality can be achieved by the match query if the total number of hits is not tracked.",
            "impact": "Discontinue use of the common query. Search requests containing a common query will return an error."
          },
          {
            "change": "The cutoff_frequency parameter has been removed from the match and multi_match query.",
            "details": "The cutoff_frequency parameter, deprecated in 7.x, has been removed in 8.0 from match and multi_match queries. The same functionality can be achieved without any configuration provided that the total number of hits is not tracked.",
            "impact": "Discontinue use of the cutoff_frequency parameter. Search requests containing this parameter in a match or multi_match query will return an error."
          },
          {
            "change": "The nested_filter and nested_path properties have been removed from the search API’s sort request body parameter.",
            "details": "The nested_filter and nested_path options, deprecated in 6.x, have been removed in favor of the nested context.",
            "impact": "Discontinue use of the sort request body parameter’s nested_filter and nested_path properties. Requests containing these properties will return an error."
          },
          {
            "change": "Search and get requests are now routed to shards using adaptive replica selection by default.",
            "details": "Elasticsearch will no longer prefer using shards in the same location (with the same awareness attribute values) to process _search and _get requests. Adaptive replica selection (activated by default in this version) will route requests more efficiently using the service time of prior inter-node communications.",
            "impact": "No action needed."
          },
          {
            "change": "Vector functions using (query, doc['field']) are no longer supported.",
            "details": "The vector functions of the form function(query, doc['field']) were deprecated in 7.6, and are now removed in 8.x. The form function(query, 'field') should be used instead. For example, cosineSimilarity(query, doc['field']) is replaced by cosineSimilarity(query, 'field') .",
            "impact": "Use the function(query, 'field') form. Discontinue use of the function(query, doc['field']) form. Requests containing the function(query, doc['field']) form will return an error."
          },
          {
            "change": "The search API’s indices_boost request body parameter no longer accepts object values.",
            "details": "The indices_boost option in the search request used to accept the boosts both as an object and as an array. The object format has been deprecated since 5.2 and is now removed in 8.0.",
            "impact": "Use only array values in the indices_boost parameter. Requests containing an object value in the indices_boost parameter will return an error."
          },
          {
            "change": "The search API’s use_field_mapping request body parameter has been removed.",
            "details": "In 7.0, we began formatting docvalue_fields by default using each field’s mapping definition. To ease the transition from 6.x, we added the format option use_field_mapping . This parameter was deprecated in 7.0, and is now removed in 8.0.",
            "impact": "Discontinue use of the use_field_mapping request body parameter. Requests containing this parameter will return an error."
          },
          {
            "change": "The search API’s from request body and url parameter cannot be negative.",
            "details": "Search request used to accept -1 as a from in the search body and the url, treating it as the default value of 0. Other negative values got rejected with an error already. We now also reject -1 as an invalid value.",
            "impact": "Change any use of -1 as from parameter in request body or url parameters by either setting it to 0 or omitting it entirely. Requests containing negative values will return an error."
          },
          {
            "change": "Range queries on date fields treat numeric values alwas as milliseconds-since-epoch.",
            "details": "Range queries on date fields used to misinterpret small numbers (e.g. four digits like 1000) as a year when no additional format was set, but would interpret other numeric values as milliseconds since epoch. We now treat all numeric values in absence of a specific format parameter as milliseconds since epoch. If you want to query for years instead, with a missing format you now need to quote the input value (e.g. \"1984\").",
            "impact": "If you query date fields without a specified format , check if the values in your queries are actually meant to be milliseconds-since-epoch and use a numeric value in this case. If not, use a string value which gets parsed by either the date format set on the field in the mappings or by strict_date_optional_time by default."
          },
          {
            "change": "The geo_bounding_box query’s type parameter has been removed.",
            "details": "The geo_bounding_box query’s type parameter was deprecated in 7.14.0 and has been removed in 8.0.0. This parameter is a no-op and has no effect on the query.",
            "impact": "Discontinue use of the type parameter. geo_bounding_box queries that include this parameter will return an error."
          },
          {
            "change": "The type query has been removed.",
            "details": "The type query has been removed. Mapping types have been removed in 8.0.",
            "impact": "Discontinue use of the type query. Requests that include the type query will return an error."
          },
          {
            "change": "The kibana_user role has been renamed kibana_admin .",
            "details": "Users who were previously assigned the kibana_user role should instead be assigned the kibana_admin role. This role grants the same set of privileges as kibana_user , but has been renamed to better reflect its intended use.",
            "impact": "Assign users with the kibana_user role to the kibana_admin role. Discontinue use of the kibana_user role."
          },
          {
            "change": "For snapshot and SLM APIs, the indices parameter no longer resolves to system indices or system data streams.",
            "details": "For snapshot and SLM APIs, the indices parameter no longer resolves to system indices or system data streams. Feature states are now the only way to back up and restore system indices or system data streams from a snapshot. You can no longer use the indices parameter for the create SLM policy API or the create snapshot API to include a system index in a snapshot. To back up a system index, use the include_global_state and feature_states parameters to include the corresponding feature state instead. By default, the include_global_state and feature_states parameters include all system indices. Similarly, you can no longer use the restore snapshot API 's indices parameter to restore a system index from a snapshot. To restore a system index, use the include_global_state and feature_states parameters to restore the corresponding feature state instead. By default, the include_global_state and feature_states parameters don’t restore any system indices.",
            "impact": "If you previously used the indices parameter to back up or restore system indices, update your SLM policies and application to use the include_global_state and feature_states parameters instead. An SLM policy that explicitly specifies a system index in the indices parameter will fail to create snapshots. Similarly, a create snapshot API or restore snapshot API request that explicitly specifies a system index in the indices parameter will fail and return an error. If the indices value includes a wildcard ( * ) pattern, the pattern will no longer match system indices."
          },
          {
            "change": "Snapshots compress metadata files by default.",
            "details": "Previously, the default value for compress was false . The default has been changed to true . This change will affect both newly created repositories and existing repositories where compress=false has not been explicitly specified.",
            "impact": "Update your workflow and applications to assume a default value of true for the compress parameter."
          },
          {
            "change": "S3 snapshot repositories now use a DNS-style access pattern by default.",
            "details": "Starting in version 7.4, s3 snapshot repositories no longer use the now-deprecated path-style access pattern by default. In versions 7.0, 7.1, 7.2 and 7.3 s3 snapshot repositories always used the path-style access pattern. This is a breaking change for deployments that only support path-style access but which are recognized as supporting DNS-style access by the AWS SDK. This breaking change was made necessary by AWS’s announcement that the path-style access pattern is deprecated and will be unsupported on buckets created after September 30th 2020.",
            "impact": "If your deployment only supports path-style access and is affected by this change then you must configure the S3 client setting path_style_access to true ."
          },
          {
            "change": "Restore requests no longer accept settings.",
            "details": "In earlier versions, you could pass both settings and index_settings in the body of a restore snapshot request, but the settings value was ignored. The restore snapshot API now rejects requests that include a settings value.",
            "impact": "Discontinue use of the settings parameter in restore snapshot request. Requests that include these parameters will return an error."
          },
          {
            "change": "The repository stats API has been removed.",
            "details": "The repository stats API has been removed. We deprecated this experimental API in 7.10.0.",
            "impact": "Use the repositories metering APIs instead."
          },
          {
            "change": "Watcher history now writes to a hidden data stream.",
            "details": "In 8.x, Elasticsearch writes Watcher history to a hidden .watcher-history-<index-template-version> data stream. Previously, Elasticsearch wrote Watcher history to hidden .watcher-history-<index-template-version>-<yyyy-MM-dd> indices.",
            "impact": "Update your requests to target the Watcher history data stream. For example, use the .watcher-history-* wildcard expression. Requests that specifically target non-existent Watcher history indices may return an error."
          },
          {
            "change": "HTTP Status code has changed for the Cluster Health API in case of a server timeout.",
            "details": "The cluster health API includes options for waiting for certain health conditions to be satisfied. If the requested conditions are not satisfied within a timeout then Elasticsearch will send back a normal response including the field \"timed_out\": true . In earlier versions it would also use the HTTP response code 408 Request timeout if the request timed out, and 200 OK otherwise. The 408 Request timeout response code is not appropriate for this situation, so from version 8.0.0 Elasticsearch will use the response code 200 OK for both cases.",
            "impact": "To detect a server timeout, check the timed_out field of the JSON response."
          },
          {
            "change": "The Content-Type response header no longer specifies the charset.",
            "details": "The Content-Type response header no longer specifies the charset. This information is not required when transferring JSON data, because JSON text will always be encoded in Unicode, with UTF-8 being the default encoding.",
            "impact": "Some applications and utilities, such as PowerShell’s Invoke-RestMethod , must receive charset information to display data correctly. If your application or utility relies on charset information in the Content-Type response header, UTF-8 encoded characters will be rendered incorrectly in the response body. As a workaround, to render non-ASCII characters, include an HTTP Accept header in your requests, specifying the charset: Accept: application/json; charset=utf-8"
          }
        ]
      },
      {
        "category": "SQL JDBC changes",
        "changes": [
          {
            "change": "JDBC driver returns geometry objects as well-known-text string instead of org.elasticsearch.geo objects.",
            "details": "To reduce the dependency of the JDBC driver onto Elasticsearch classes, the JDBC driver returns geometry data as strings using the WKT (well-known text) format instead of classes from the org.elasticsearch.geometry . Users can choose the geometry library desired to convert the string representation into a full-blown objects either such as the elasticsearch-geo library (which returned the object org.elasticsearch.geo as before), jts or spatial4j.",
            "impact": "Before upgrading, replace any org.elasticsearch.geo classes on the ResultSet#getObject or ResultSet#setObject Elasticsearch JDBC driver with their WKT representation by simply calling toString or org.elasticsearch.geometry.utils.WellKnownText#toWKT/fromWKT methods. This change does NOT impact users that do not use geometry classes."
          }
        ]
      },
      {
        "category": "System requirement changes",
        "changes": [
          {
            "change": "Several EOL operating systems are no longer supported.",
            "details": "The following operating systems have reached their end of life and are no longer supported by Elasticsearch: Amazon Linux CentOS 6 Debian 8 openSUSE Leap 42 Oracle Enterprise Linux 6 Ubuntu 16.04 We’ve also removed support for SysV init . No supported operating systems use the SysV init process.",
            "impact": "Ensure your nodes use a supported operating system . Running Elasticsearch on an unsupported operating system can result in unexpected errors or failures."
          },
          {
            "change": "Java 17 is required.",
            "details": "Java 17 or higher is now required to run Elasticsearch and any of its command line tools.",
            "impact": "Use Java 17 or higher. Attempts to run Elasticsearch 8.0 using earlier Java versions will fail. There is not yet a FIPS-certified security module for Java 17 that you can use when running Elasticsearch 8.0 in FIPS 140-2 mode. If you run in FIPS 140-2 mode, you will either need to request an exception from your security organization to upgrade to Elasticsearch 8.0, or remain on Elasticsearch 7.x until Java 17 is certified."
          },
          {
            "change": "JAVA_HOME is no longer supported.",
            "details": "JAVA_HOME is no longer supported to set the path for the JDK. Instead, use the bundled JDK (preferable), or set ES_JAVA_HOME .",
            "impact": "Use the bundled JDK (preferable), or set ES_JAVA_HOME . JAVA_HOME will be ignored."
          }
        ]
      },
      {
        "category": "Transform changes",
        "changes": [
          {
            "change": "Transforms created in 7.4 or earlier versions must be upgraded.",
            "details": "Early beta versions of transforms had configuration information in a format that is no longer supported.",
            "impact": "Use the upgrade transforms API to fix your transforms. This upgrade does not affect the source or destination indices."
          }
        ]
      }
    ]
  },
  {
    "version": "8.1",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.1.html",
    "breaking_changes": [
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "The search API’s fields parameter now normalizes geometry objects that cross the international dateline",
            "details": "The search API’s fields parameter now normalizes geo_shape objects that cross the international dateline (+/-180° longitude). For example, if a polygon crosses the dateline, the fields parameter returns it as two polygons. You can still retrieve original, unnormalized geometry objects from _source.",
            "impact": "If your application requires unnormalized geometry objects, retrieve them from _source rather than using the fields parameter."
          }
        ]
      }
    ]
  },
  {
    "version": "8.2",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.2.html",
    "breaking_changes": []
  },
  {
    "version": "8.3",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.3.html",
    "breaking_changes": []
  },
  {
    "version": "8.4",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.4.html",
    "breaking_changes": []
  },
  {
    "version": "8.5",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.5.html",
    "breaking_changes": [
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "The bulk API now rejects requests containing unrecognized actions",
            "details": "Requests to the bulk API comprise a sequence of items, each of which starts with a JSON object describing the item. This object includes the type of action to perform with the item which should be one of create, update, index, or delete. Earlier versions of Elasticsearch had a bug that caused them to ignore items with an unrecognized type, skipping the next line in the request, but this lenient behaviour meant that there is no way for the client to associate the items in the response with the items in the request, and in some cases it would cause the remainder of the request to be parsed incorrectly. From version 8.5 onwards, requests to the bulk API must comprise only items with recognized types. Elasticsearch will reject requests containing any items with an unrecognized type with a 400 Bad Request error response. We consider this change to be a bugfix but list it here as a breaking change since it may affect the behaviour of applications which rely on being able to send unrecognized actions to Elasticsearch.",
            "impact": "Ensure your application only sends items with type create, update, index or delete to the bulk API."
          }
        ]
      }
    ]
  },
  {
    "version": "8.6",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.6.html",
    "breaking_changes": []
  },
  {
    "version": "8.7",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.7.html",
    "breaking_changes": [
      {
        "category": "Ingest changes",
        "changes": [
          {
            "change": "Making JsonProcessor stricter so that it does not silently drop data",
            "details": "The ingest node’s json processor was previously lenient. It would accept invalid JSON data if it started with valid JSON data. Anything after the valid part would be silently discarded. From 8.7 onwards, the default behavior is to reject invalid JSON data with an exception so that data is not silently lost. The old behavior can be reproduced by passing false as the value of the new strict_json_parsing processor parameter. We consider this change to be a bugfix but list it here as a breaking change since it may affect the behavior of applications which were sending invalid JSON data to the json processor.",
            "impact": "Ensure your application only sends valid JSON data to the json processor, or modify the json processors in your pipelines to set the strict_json_parsing parameter to false."
          }
        ]
      }
    ]
  },
  {
    "version": "8.8",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.8.html",
    "breaking_changes": []
  },
  {
    "version": "8.9",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.9.html",
    "breaking_changes": [
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "Switch TDigestState to use HybridDigest by default",
            "details": "The default implementation for TDigest in percentile calculations switches to a new internal implementation offering superior performance (2x-10x speedup), at a very small accuracy penalty for very large sample populations.",
            "impact": "This change leads to generating slightly different results in percentile calculations. If the highest possible accuracy is desired, or it’s crucial to produce exactly the same results as in previous versions, one can either set execution_hint to high_accuracy in the tdigest spec of a given percentile calculation, or set search.aggs.tdigest_execution_hint to high_accuracy in cluster settings to apply to all percentile queries."
          }
        ]
      }
    ]
  },
  {
    "version": "8.10",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.10.html",
    "breaking_changes": [
      {
        "category": "Cluster and node setting changes",
        "changes": [
          {
            "change": "Remove the unused executor builder for vector tile plugin",
            "details": "The threadpool called vectortile is a left over from the original development of the vector tile search end point and it is used nowhere. It can still be a breaking change if it is configured on the elasticsearch yml file, for example by changing the threadpool size thread_pool.vectortile.size=8 '",
            "impact": "In the case the threadpool appears on the yaml file, Elasticsearch will not start until those lines are removed."
          }
        ]
      },
      {
        "category": "Java API changes",
        "changes": [
          {
            "change": "Change pre-configured and cached analyzer components to use IndexVersion instead of Version",
            "details": "This PR changes the types used to obtain pre-configured components from Version to IndexVersion, with corresponding changes to method names. Prior to 8.10, there is a one-to-one mapping between node version and index version, with corresponding constants in the IndexVersion class. Starting in 8.10, IndexVersion is versioned independently of node version, and will be a simple incrementing number. For more information on how to use IndexVersion and other version types, please see the contributing guide.",
            "impact": "Analysis components now take IndexVersion instead of Version"
          }
        ]
      }
    ]
  },
  {
    "version": "8.11",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.11.html",
    "breaking_changes": [
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "Remove transport_versions from cluster state API",
            "details": "The transport_versions subobject of the response to GET _cluster/state has been replaced by the nodes_versions subobject.",
            "impact": "If needed, retrieve the per-node transport versions from the nodes_versions subobject."
          }
        ]
      }
    ]
  },
  {
    "version": "8.12",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.12.html",
    "breaking_changes": []
  },
  {
    "version": "8.13",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.13.html",
    "breaking_changes": [
      {
        "category": "Index Settings",
        "changes": [
          {
            "change": "index.look_ahead_time default and max value reduced",
            "details": "The default value of the `index.look_ahead_time` index setting is changed from 2 hours to 30 minutes. The maximum allowed value for this setting is also lowered from 2 hours to 30 minutes.",
            "impact": "Documents with an `@timestamp` of 30 minutes or more in the future will now be rejected, whereas previously documents with `@timestamp` of 2 hours or more in the future were rejected. To retain the previous behavior, update the `index.look_ahead_time` setting to two hours before performing the upgrade."
          },
          {
            "change": "look_ahead_time index setting max value reduced",
            "details": "The maximum value for the `look_ahead_time` index setting is reduced from 7 days to 2 hours.",
            "impact": "Any value for `look_ahead_time` that was previously set between 2 hours and 7 days will now be treated as a look-ahead time of 2 hours."
          }
        ]
      },
      {
        "category": "ESQL",
        "changes": [
          {
            "change": "ESQL FROM METADATA syntax no longer requires square brackets",
            "details": "The square brackets `[]` previously required for the `METADATA` option inside `FROM` command statements are no longer needed and are dropped from the grammar.",
            "impact": "Previously, to return metadata fields, users had to use square brackets (e.g., `FROM index [METADATA _index]`). This syntax is no longer supported; the `[]` must be dropped, simplifying the command to `FROM index METADATA _index`. Queries using the old syntax will likely fail."
          },
          {
            "change": "ESQL PROJECT keyword removed",
            "details": "The `PROJECT` keyword, which served as an alias for `KEEP`, has been removed from the ES|QL grammar.",
            "impact": "Before this change, queries using `PROJECT` (e.g., `FROM idx | PROJECT name, surname`) would execute with a warning. With this change, the `PROJECT` command is no longer recognized by the query parser, and queries using it will now return a parsing exception. Users must update their queries to use `KEEP` instead of `PROJECT`."
          },
          {
            "change": "ESQL functions is_nan, is_finite, and is_infinite removed",
            "details": "The ES|QL functions `is_nan`, `is_finite`, and `is_infinite` have been removed and are no longer supported.",
            "impact": "Attempting to use these functions in ES|QL queries will now result in a planner time error."
          }
        ]
      }
    ]
  },
  {
    "version": "8.14",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.14.html",
    "breaking_changes": [
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "Prevent DLS/FLS if replication is assigned",
            "details": "For cross-cluster API keys, Elasticsearch no longer allows specifying document-level security (DLS) or field-level security (FLS) in the search field, if replication is also specified. Elasticsearch likewise blocks the use of any existing cross-cluster API keys that meet this condition.",
            "impact": "Remove any document-level security (DLS) or field-level security (FLS) definitions from the search field for cross-cluster API keys that also have a replication field, or create two separate cross-cluster API keys, one for search and one for replication."
          },
          {
            "change": "Stricter Document Level Security (DLS)",
            "details": "When Document Level Security (DLS) is applied to terms aggregations and min_doc_count is set to 0, stricter security rules apply. When Document Level Security (DLS) is applied to the validate query API with the rewrite parameter, stricter security rules apply.",
            "impact": "If needed, test workflows with DLS enabled to ensure that the stricter security rules do not impact your application."
          }
        ]
      }
    ]
  },
  {
    "version": "8.15",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.15.html",
    "breaking_changes": [
      {
        "category": "Cluster and node setting changes",
        "changes": [
          {
            "change": "Change skip_unavailable remote cluster setting default value to true",
            "details": "The default value of the skip_unavailable setting is now set to true. All existing and future remote clusters that do not define this setting will use the new default. This setting only affects cross-cluster searches using the _search or _async_search API.",
            "impact": "Unavailable remote clusters in a cross-cluster search will no longer cause the search to fail unless skip_unavailable is configured to be false in elasticsearch.yml or via the _cluster/settings API. Unavailable clusters with skip_unavailable = true (either explicitly or by using the new default) are marked as SKIPPED in the search response metadata section and do not fail the entire search. If users want to ensure that a search returns a failure when a particular remote cluster is not available, skip_unavailable must be now be set explicitly."
          }
        ]
      },
      {
        "category": "Rollup changes",
        "changes": [
          {
            "change": "Disallow new rollup jobs in clusters with no rollup usage",
            "details": "The put rollup API will fail with an error when a rollup job is created in a cluster with no rollup usage",
            "impact": "Clusters with no rollup usage (either no rollup job or index) can not create new rollup jobs"
          }
        ]
      },
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "Interpret ?timeout=-1 as infinite ack timeout",
            "details": "Today Elasticsearch accepts the parameter ?timeout=-1 in many APIs, but interprets this to mean the same as ?timeout=0 . From 8.15 onwards ?timeout=-1 will mean to wait indefinitely, aligning the behaviour of this parameter with other similar parameters such as ?master_timeout .",
            "impact": "Use ?timeout=0 to force relevant operations to time out immediately instead of ?timeout=-1"
          },
          {
            "change": "Replace model_id with inference_id in GET inference API",
            "details": "From 8.15 onwards the Get inference API response will return an inference_id field instead of a model_id .",
            "impact": "If your application uses the model_id in a GET inference API response, switch it to use inference_id instead."
          }
        ]
      }
    ]
  },
  {
    "version": "8.16",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.16.html",
    "breaking_changes": [
      {
        "category": "Analysis changes",
        "changes": [
          {
            "change": "Set lenient to true by default when using updateable synonyms",
            "details": "When a synonym or synonym_graph token filter is configured with updateable: true , the default lenient value will now be true .",
            "impact": "synonym or synonym_graph token filters configured with updateable: true will ignore invalid synonyms by default. This prevents shard initialization errors on invalid synonyms."
          }
        ]
      },
      {
        "category": "Mapping changes",
        "changes": [
          {
            "change": "JDK locale database change",
            "details": "Elasticsearch 8.16 changes the version of the JDK that is included from version 22 to version 23. This changes the locale database that is used by Elasticsearch from the COMPAT database to the CLDR database. This change can cause significant differences to the textual date formats accepted by Elasticsearch, and to calculated week-dates. If you run Elasticsearch 8.16 on JDK version 22 or below, it will use the COMPAT locale database to match the behavior of 8.15. However, starting with Elasticsearch 9.0, Elasticsearch will use the CLDR database regardless of JDK version it is run on.",
            "impact": "This affects you if you use custom date formats using textual or week-date field specifiers. If you use date fields or calculated week-dates that change between the COMPAT and CLDR databases, then this change will cause Elasticsearch to reject previously valid date fields as invalid data. You might need to modify your ingest or output integration code to account for the differences between these two JDK versions. Starting in version 8.15.2, Elasticsearch will log deprecation warnings if you are using date format specifiers that might change on upgrading to JDK 23. These warnings are visible in Kibana. For detailed guidance, refer to Differences in locale information between JDK versions and the Elastic blog ."
          }
        ]
      },
      {
        "category": "ES|QL changes",
        "changes": [
          {
            "change": "ESQL: Entirely remove META FUNCTIONS",
            "details": "Removes an undocumented syntax from ESQL: META FUNCTION. This was never reliable or really useful. Consult the documentation instead.",
            "impact": "Removes an undocumented syntax from ESQL: META FUNCTION"
          }
        ]
      },
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "Reworking RRF retriever to be evaluated during rewrite phase",
            "details": "In this release (8.16), we have introduced major changes to the retrievers framework and how they can be evaluated, focusing mainly on compound retrievers like rrf and text_similarity_reranker , which allowed us to support full composability (i.e. any retriever can be nested under any compound retriever), as well as supporting additional search features like collapsing, explaining, aggregations, and highlighting. To ensure consistency, and given that this rework is not available until 8.16, rrf and text_similarity_reranker retriever queries would now throw an exception in a mixed cluster scenario, where there are nodes both in current or later (i.e. >= 8.16) and previous ( ⇐ 8.15) versions. As part of the rework, we have also removed the _rank property from the responses of an rrf retriever.",
            "impact": "- Users will not be able to use the rrf and text_similarity_reranker retrievers in a mixed cluster scenario with previous releases (i.e. prior to 8.16), and the request will throw an IllegalArgumentException . - _rank has now been removed from the output of the rrf retrievers so trying to directly parse the field will throw an exception"
          },
          {
            "change": "Update data stream lifecycle telemetry to track global retention",
            "details": "In this release we introduced global retention settings that fulfil the following criteria: a data stream managed by the data stream lifecycle, a data stream that is not an internal data stream. As a result, we defined different types of retention: data retention : the retention configured on data stream level by the data stream user or owner default global retention: the retention configured by an admin on a cluster level and applied to any data stream that doesn’t have data retention and fulfils the criteria. max global retention: the retention configured by an admin to guard against having long retention periods. Any data stream that fulfills the criteria will adhere to the data retention unless it exceeds the max retention, in which case the max global retention applies. effective retention: the retention that applies on the data stream that fulfill the criteria at a given moment in time. It takes into consideration all the retention above and resolves it to the retention that will take effect. Considering the above changes, having a field named retention in the usage API was confusing. For this reason, we renamed it to data_retention and added telemetry about the other configurations too.",
            "impact": "Users that use the field data_lifecycle.retention should use the data_lifecycle.data_retention"
          }
        ]
      },
      {
        "category": "Ingest changes",
        "changes": [
          {
            "change": "Ingest enrich.cache_size name inconsistency",
            "details": "The setting enrich.cache_size was temporarily renamed to enrich.cache.size in 8.16.0 and 8.16.1 . The preferred resolution is upgrading to 8.16.2 or higher. If that is not possible, temporarily rename the setting to enrich.cache.size until you are able to upgrade to 8.16.2 or higher. The temporary name is deprecated and will be removed in a future version.",
            "impact": "If your cluster has enrich.cache_size configured prior to upgrading to 8.16.0 or 8.16.1 you may see errors that prevent the upgrade from proceeding."
          }
        ]
      }
    ]
  },
  {
    "version": "8.17",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.17.html",
    "breaking_changes": []
  },
  {
    "version": "8.18",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.18.html",
    "breaking_changes": [
      {
        "category": "Analysis changes",
        "changes": [
          {
            "change": "Semantic Text To Act Like A Normal Text Field",
            "details": "The previous semantic_text format used a complex subfield structure in _source to store the embeddings. This complicated interactions/integrations with semantic_text fields and _source in general. This new semantic_text format treats it as a normal text field, where the field’s value in _source is the value assigned by the user.",
            "impact": "Users who parsed the subfield structure of the previous semantic_text format in _source will need to update their parsing logic. The new format does not directly expose the chunks and embeddings generated from the input text. The new format will be applied to all new indices, any existing indices will continue to use the previous format."
          }
        ]
      },
      {
        "category": "Cluster and node setting changes",
        "changes": [
          {
            "change": "Drop TLS_RSA cipher support for JDK 24",
            "details": "This change removes TLS_RSA ciphers from the list of default supported ciphers, for Elasticsearch deployments running on JDK 24.",
            "impact": "The dropped ciphers are TLS_RSA_WITH_AES_256_GCM_SHA384 , TLS_RSA_WITH_AES_128_GCM_SHA256 , TLS_RSA_WITH_AES_256_CBC_SHA256 , TLS_RSA_WITH_AES_128_CBC_SHA256 , TLS_RSA_WITH_AES_256_CBC_SHA , and TLS_RSA_WITH_AES_128_CBC_SHA . TLS connections to Elasticsearch using these ciphers will no longer work. Please configure your clients to use one of supported cipher suites."
          }
        ]
      },
      {
        "category": "Packaging changes",
        "changes": [
          {
            "change": "Disable machine learning on macOS x86_64",
            "details": "The machine learning plugin is permanently disabled on macOS x86_64. For the last three years Apple has been selling hardware based on the arm64 architecture, and support will increasingly focus on this architecture in the future. Changes to upstream dependencies of Elastic’s machine learning functionality have made it unviable for Elastic to continue to build machine learning on macOS x86_64.",
            "impact": "To continue to use machine learning functionality on macOS please switch to an arm64 machine (Apple silicon). Alternatively, it will still be possible to run Elasticsearch with machine learning enabled in a Docker container on macOS x86_64."
          }
        ]
      },
      {
        "category": "REST API changes",
        "changes": [
          {
            "change": "Set allow_partial_search_results=true by default",
            "details": "Before this change, in case of shard failures, EQL queries always returned an error. With this change, they will keep running and will return partial results.",
            "impact": "EQL queries that would previously fail due to shard failures, will now succeed and return partial results. The previous defaults can be restored by setting xpack.eql.default_allow_partial_results cluster setting to false or setting with allow_partial_search_results to false in the query request."
          }
        ]
      },
      {
        "category": "ES|QL changes",
        "changes": [
          {
            "change": "Limit the scope of the skip_unavailable setting for remote clusters",
            "details": "Before this change, ES|QL would honor the skip_unavailable setting for nonmatching indices errors at planning time, meaning that when a query with a concrete (non-wildcarded) index was issued to a cluster where skip_unavailable=true, the index would be skipped, allowing the query to proceed on any other specified clusters rather than returning an error.",
            "impact": "Remote clusters, regardless of their skip_unavailable setting, will now use the same logic as the local cluster for index expression analysis at plan time. As a result, any missing concrete index in your index expression will return an error rather than partial results."
          }
        ]
      }
    ]
  },
  {
    "version": "8.19",
    "url": "https://www.elastic.co/guide/en/elasticsearch/reference/8.19/migrating-8.19.html",
    "breaking_changes": [
      {
        "category": "Cluster and node setting changes",
        "changes": [
          {
            "change": "Upgrade discovery-ec2 to AWS SDK v2",
            "details": "In earlier versions of Elasticsearch the discovery-ec2 plugin was based on the AWS SDK v1. AWS will withdraw support for this SDK before the end of the life of Elasticsearch 8.19 so we must migrate to the newer AWS SDK v2. Unfortunately there are several differences between the two AWS SDK versions which may require you to adjust your system configuration when upgrading to Elasticsearch 8.19 or later. These differences include, but may not be limited to, the following items. AWS SDK v2 does not support the EC2 IMDSv1 protocol. AWS SDK v2 does not support the aws.secretKey or com.amazonaws.sdk.ec2MetadataServiceEndpointOverride system properties. AWS SDK v2 does not permit specifying a choice between HTTP and HTTPS so the discovery.ec2.protocol setting is no longer effective. AWS SDK v2 does not accept an access key without a secret key or vice versa.",
            "impact": "If you use the discovery-ec2 plugin, test your upgrade thoroughly before upgrading any production workloads. Adapt your configuration to the new SDK functionality. This includes, but may not be limited to, the following items. If you use IMDS to determine the availability zone of a node or to obtain credentials for accessing the EC2 API, ensure that it supports the IMDSv2 protocol. If applicable, discontinue use of the aws.secretKey and com.amazonaws.sdk.ec2MetadataServiceEndpointOverride system properties. If applicable, specify that you wish to use the insecure HTTP protocol to access the EC2 API by setting discovery.ec2.endpoint to a URL which starts with http:// . Either supply both an access key and a secret key using the keystore settings discovery.ec2.access_key and discovery.ec2.secret_key , or configure neither of these settings."
          },
          {
            "change": "Upgrade repository-s3 to AWS SDK v2",
            "details": "In earlier versions of Elasticsearch the repository-s3 plugin was based on the AWS SDK v1. AWS will withdraw support for this SDK before the end of the life of Elasticsearch 8.19 so we must migrate to the newer AWS SDK v2. Unfortunately there are several differences between the two AWS SDK versions which may require you to adjust your system configuration when upgrading to Elasticsearch 8.19 or later. These differences include, but may not be limited to, the following items. AWS SDK v2 requires users to specify the region to use for signing requests, or else to run in an environment in which it can determine the correct region automatically. The older SDK would try to determine the region based on the endpoint URL as specified with the s3.client.${CLIENT_NAME}.endpoint setting, together with other data drawn from the operating environment, and would ultimately fall back to us-east-1 if no better value could be found. AWS SDK v2 does not support the EC2 IMDSv1 protocol. AWS SDK v2 does not support the com.amazonaws.sdk.ec2MetadataServiceEndpointOverride system property. AWS SDK v2 does not permit specifying a choice between HTTP and HTTPS so the s3.client.${CLIENT_NAME}.protocol setting is deprecated. AWS SDK v2 does not permit control over throttling for retries, so the the s3.client.${CLIENT_NAME}.use_throttle_retries setting is deprecated and no longer has any effect. AWS SDK v2 requires the use of the V4 signature algorithm, so the s3.client.${CLIENT_NAME}.signer_override setting is deprecated and no longer has any effect. AWS SDK v2 does not support the log-delivery-write canned ACL. AWS SDK v2 counts 4xx responses differently in its metrics reporting. AWS SDK v2 always uses the regional STS endpoint, whereas AWS SDK v1 could use either a regional endpoint or the global https://sts.amazonaws.com one.",
            "impact": "If you use the repository-s3 module, test your upgrade thoroughly before upgrading any production workloads. Adapt your configuration to the new SDK functionality. This includes, but may not be limited to, the following items. Specify the correct signing region using the s3.client.${CLIENT_NAME}.region setting on each node. Elasticsearch will try and determine the correct region based on the endpoint URL and other data drawn from the operating environment but cannot guarantee to do so correctly in all cases. If you use IMDS to determine the availability zone of a node or to obtain credentials for accessing the EC2 API, ensure that it supports the IMDSv2 protocol. If applicable, discontinue use of the com.amazonaws.sdk.ec2MetadataServiceEndpointOverride system property. If applicable, specify the protocol to use to access the S3 API by setting s3.client.${CLIENT_NAME}.endpoint to a URL which starts with http:// or https:// . If applicable, discontinue use of the log-delivery-write canned ACL."
          }
        ]
      },
      {
        "category": "ES|QL changes",
        "changes": [
          {
            "change": "Allow partial results by default in ES|QL",
            "details": "In earlier versions of Elasticsearch, ES|QL would fail the entire query if it encountered any error. ES|QL now returns partial results instead of failing when encountering errors.",
            "impact": "Callers should check the is_partial flag returned in the response to determine if the result is partial or complete. If returning partial results is not desired, this option can be overridden per request via an allow_partial_results parameter in the query URL or globally via the cluster setting esql.query.allow_partial_results ."
          },
          {
            "change": "Cluster setting \"skip_unavailable\" catches all runtime errors",
            "details": "If skip_unavailable is set to true , the runtime errors from this cluster do not lead to a failure of the query. Instead, the cluster is set to skipped or partial status, and the query execution continues. This is a breaking change from previous versions, where skip_unavailable only applied to errors related to a cluster being unavailable.",
            "impact": "The errors on remote clusters, e.g. missing indices, will not lead to a failure of the query. Instead, the cluster is set to skipped or partial status in the response metadata."
          },
          {
            "change": "Disallow mixed quoted/unquoted patterns in FROM",
            "details": "Previously, the ES|QL grammar allowed users to individually quote constituent strings in index patterns such as \"remote_cluster\":\"index_name\". This would allow users to write complex malformed index patterns that often slip through grammar and the subsequent validation. This could result in runtime errors that can be misleading. This change simplifies the grammar to early reject such malformed index patterns at the parsing stage, allowing users to write simpler queries and see more relevant and meaningful errors.",
            "impact": "Users can write queries with simpler index patterns and see more meaningful and relevant errors."
          },
          {
            "change": "Unquoted index patterns do not allow ( and ) characters",
            "details": "Previously, ES|QL accepted unquoted index patterns containing brackets, such as FROM index(1) | ENRICH policy(2) . This query syntax is no longer valid because it could conflict with subquery syntax, where brackets are used as delimiters. Brackets are now only allowed in quoted index patterns. For example: FROM \"index(1)\" | ENRICH \"policy(2)\" .",
            "impact": "This affects existing queries containing brackets in index or policy names, i.e. in FROM, ENRICH, and LOOKUP JOIN commands."
          }
        ]
      }
    ]
  }
]