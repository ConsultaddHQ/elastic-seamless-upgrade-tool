plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.hyperflex'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':server:modules:elastic-client')
    implementation project(':server:modules:ansible')
    implementation project(':server:modules:ssh-client')
    implementation project(':server:modules:common')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    //Dev dependencies
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

allprojects {
    version = rootProject.version

    apply plugin: 'checkstyle'

    repositories {
        mavenCentral()
    }

    checkstyle {
        ignoreFailures = false
        maxErrors = 0
        toolVersion = "10.26.1"
        configFile = rootProject.file("checkstyle/checkstyle.xml")
    }

    tasks.withType(Checkstyle).configureEach {
        reports {
            xml.required = false
            html.required = true
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

}

bootJar {
    // Include Vite build output in the final Spring Boot JAR
    dependsOn ':frontend:build'
    from("../frontend/build/client") {
        into "BOOT-INF/classes/static" // Place files in Spring Boot's static directory
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.clean.dependsOn ':frontend:clean'
tasks.build.dependsOn ':frontend:build'
