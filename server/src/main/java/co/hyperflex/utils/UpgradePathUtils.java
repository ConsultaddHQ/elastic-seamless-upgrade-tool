package co.hyperflex.utils;

import java.util.List;
import java.util.Map;

public class UpgradePathUtils {

  private static final Map<String, List<String>> POSSIBLE_UPGRADES = Map.ofEntries(
      Map.entry("7.10",
          List.of("7.11.0", "7.11.1", "7.12.1", "7.13.3", "7.13.4", "7.14.0", "7.14.1", "7.14.2",
              "7.15.0", "7.15.1", "7.15.2", "7.16.0", "7.16.1", "7.16.2", "7.16.3", "7.17.28")),
      Map.entry("7.11",
          List.of("7.12.0", "7.12.1", "7.13.2", "7.13.3", "7.13.4", "7.14.0", "7.14.1", "7.14.2",
              "7.15.0", "7.15.1", "7.15.2", "7.16.0", "7.16.1", "7.16.2", "7.16.3", "7.17.28")),
      Map.entry("7.12",
          List.of("7.13.0", "7.13.1", "7.13.2", "7.13.3", "7.13.4", "7.14.0", "7.14.1", "7.14.2",
              "7.15.0", "7.15.1", "7.15.2", "7.16.0", "7.16.1", "7.16.2", "7.16.3", "7.17.28")),
      Map.entry("7.13",
          List.of("7.14.0", "7.14.1", "7.14.2", "7.15.0", "7.15.1", "7.15.2", "7.16.0", "7.16.1",
              "7.16.2", "7.16.3", "7.17.28")),
      Map.entry("7.14",
          List.of("7.15.0", "7.15.1", "7.15.2", "7.16.0", "7.16.1", "7.16.2", "7.16.3", "7.17.28")),
      Map.entry("7.15", List.of("7.16.0", "7.16.1", "7.16.2", "7.16.3", "7.17.28")),
      Map.entry("7.16", List.of("7.17.28")),
      Map.entry("7.17", List.of("8.0.0")),
      Map.entry("8.0",
          List.of("8.1.3", "8.2.3", "8.3.3", "8.4.3", "8.5.3", "8.6.2", "8.7.1", "8.8.2", "8.9.2",
              "8.10.4", "8.11.4", "8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.1",
          List.of("8.2.3", "8.3.3", "8.4.3", "8.5.3", "8.6.2", "8.7.1", "8.8.2", "8.9.2", "8.10.4",
              "8.11.4", "8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.2",
          List.of("8.3.3", "8.4.3", "8.5.3", "8.6.2", "8.7.1", "8.8.2", "8.9.2", "8.10.4", "8.11.4",
              "8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.3",
          List.of("8.4.3", "8.5.3", "8.6.2", "8.7.1", "8.8.2", "8.9.2", "8.10.4", "8.11.4",
              "8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.4",
          List.of("8.5.3", "8.6.2", "8.7.1", "8.8.2", "8.9.2", "8.10.4", "8.11.4", "8.12.2",
              "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.5",
          List.of("8.6.2", "8.7.1", "8.8.2", "8.9.2", "8.10.4", "8.11.4", "8.12.2", "8.13.4",
              "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.6",
          List.of("8.7.1", "8.8.2", "8.9.2", "8.10.4", "8.11.4", "8.12.2", "8.13.4", "8.14.3",
              "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.7",
          List.of("8.8.2", "8.9.2", "8.10.4", "8.11.4", "8.12.2", "8.13.4", "8.14.3", "8.15.5",
              "8.16.4", "8.17.2")),
      Map.entry("8.8",
          List.of("8.9.2", "8.10.4", "8.11.4", "8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4",
              "8.17.2")),
      Map.entry("8.9",
          List.of("8.10.4", "8.11.4", "8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.10",
          List.of("8.11.4", "8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.11", List.of("8.12.2", "8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.12", List.of("8.13.4", "8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.13", List.of("8.14.3", "8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.14", List.of("8.15.5", "8.16.4", "8.17.2")),
      Map.entry("8.15", List.of("8.16.4", "8.17.2")),
      Map.entry("8.16", List.of("8.17.2", "8.17.3", "8.17.4", "8.17.5", "8.17.6", "8.17.7", "8.17.8", "8.17.9", "8.18.2", "8.19.0")),
      Map.entry("8.17", List.of("8.17.2", "8.17.3", "8.17.4", "8.17.5", "8.17.6", "8.17.7", "8.17.8", "8.17.9", "8.18.2", "8.19.0"))
  );

  public static List<String> getPossibleUpgrades(String version) {
    if (version == null) {
      return null;
    }
    var possibleUpgrades = POSSIBLE_UPGRADES.keySet().stream()
        .sorted(VersionUtils.VERSION_COMPARATOR)
        .filter(v -> VersionUtils.isVersionGt(version, v))
        .reduce((first, second) -> second)
        .map(POSSIBLE_UPGRADES::get)
        .orElse(List.of());
    return possibleUpgrades.stream().sorted((v1, v2) -> VersionUtils.VERSION_COMPARATOR.compare(v2, v1)).toList();
  }

}
